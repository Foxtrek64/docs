{
  "legal/vulnerability-reporting.html": {
    "href": "legal/vulnerability-reporting.html",
    "title": "Vulnerability Reporting Policy | LuzFaltex Documentation",
    "keywords": "LuzFaltex Security Vulnerability Reporting Policy At LuzFaltex, trust is our number one value, and we take the protection of our members' data very seriously. LuzFaltex acknowledges the valuable role that independent security researchers play in internet security. As a result, we encourage responsible reporting of any vulnerabilities that may be found in our site or applications. LuzFaltex is committed to working with security researchers to verify and address potential vulnerabilities that are reported to us. Please review these terms before you test and/or report a vulnerability. LuzFaltex pledges not to initiate legal action against researchers for penetrating or attempting to penetrate our systems as long as they adhere to this policy. Responsible Disclosure Guidelines We will investigate legitimate reports and make every effort to quickly correct any vulnerability. If you are a security researcher and you have found a vulnerability that is not resolved by the 10 Immutable Laws of Security , please send an email to us at security@luzfaltex.com with as much of the information below as possible. This information will help us to better understand the nature and scope of the possible issue: Type of issue (buffer overflow, SQL injection, cross-site scripting, etc.) Product and version that contains the bug Any special configuration required to reproduce the issue Step-by-step instructions to reproduce the issue Proof-of-concept exploit code Impact of the issue, including how an attacker could exploit the issue You should receive a response within three business days. If you do not, please follow up with us to ensure we received your message. In order to be compliant with this policy, please refrain from accessing private information more than required to reasonably demonstrate the scope of the vulnerability; modifying or deleting data that does not belong to you; or releasing any information not directly related to the exploit. Reporting and Dissemination of Information When we find a vulnerability, we develop a patch as quickly as possible and broadly disseminate information about the vulnerability, the risk it poses, and what customers can do to protect themselves against it. However, to do this we need the help of the people who discover security vulnerabilities. We cannot develop security patches overnight. Diagnosing and patching a vulnerability is a significant engineering challenge under any conditions, but it is even more difficult when details of a vulnerability have been made public before a patch can be developed. In such cases, speed must become our primary consideration, in order to protect our customers against malicious users who would exploit the vulnerability. The responsibility for LuzFaltex's products rests with LuxFaltex alone, and we take that responsibility very seriously. However, there has traditionally been an unwritten rule among security professionals that the discoverer of a security vulnerability has an obligation to give the vendor an opportunity to correct the vulnerability before publicly disclosing it. This serves everyone's best interests, by ensuring that customers receive comprehensive, high-quality patches for security vulnerabilities but are not exposed to malicious users while the patch is being developed. Once customers are protected, public discussion of the vulnerability is entirely in order, and helps the industry at large improve its products. Many security professionals follow these practices, and LuzFaltex wants to single them out for special thanks. The Hall of Fame is intended to do this. When you see a security professional acknowledged in a Hall of Fame, it means that they reported the vulnerability to us confidentially, worked with us to develop the patch, and helped us disseminate information about it once the threat was eliminated. They minimized the threat to customers everywhere by ensuring that LuzFaltex could fix the problem before malicious users even knew it existed."
  },
  "legal/overview.html": {
    "href": "legal/overview.html",
    "title": "Legal Documentation Overview | LuzFaltex Documentation",
    "keywords": "Legal Documentation Here you can find our legal documentation. This documentation applies to all sites and services provided by LuzFaltex, except where otherwise specified. Important Please review the Overview pages available on the left. These pages provide at-a-glance understanding of our policies. Do note that the Overview pages are intended only as human-readable summaries and are not replacements for the policies they represent."
  },
  "legal/code-of-conduct.html": {
    "href": "legal/code-of-conduct.html",
    "title": "Code Of Conduct | LuzFaltex Documentation",
    "keywords": "LuzFaltex Code of Conduct This code of conduct outlines expectations for participation in LuzFaltex-managed communities, as well as steps for reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all. People violating this code of conduct may be banned from the community. Our communities strive to: Be friendly and patient: Remember you might not be communicating in someone else's primary spoken language. Be Welcoming: Our communities welcome and support people of all backgrounds and identities. This includes but is not limited to members of any race, ethnicity, culture, national origin, color, immigration status, social and economic status, education level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical disability. Be respectful: We are a world-wide community of professionals, and we conduct ourselves professionally. Disagreement is no excuse for poor behavior and poor manners. Disrespectful and unacceptable behavior includes, but is not limited to: violent threats or language, discriminatory or derogatory jokes and language, posting sexually explicit or violent material, posting, or threatening to post, people's personally identifying information (\"doxing\"), insults, especially those using discriminatory terms or slurs, behavior that could be perceived as sexual attention, or advocating for or encouraging any of the above behaviors. Understand disagreements: Disagreements, both social and technical, are useful learning opportunities. Seek to understand the viewpoints of others and resolve the differences constructively. This code is not exhaustive or complete. It serves to capture our common understanding of a productive, collaborative environment. We expect the code to be followed in spirit as much as in the letter. Scope This code applies to all LuzFaltex communities, sites, and services as per your agreement with the TACOS . This code also applies in public spaces when an individual is representing a project or its community. Examples include an official project e-mail address, posing via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by the project itself. Reporting Code of Conduct Issues We encourage all community members to resolve issues on their own whenever possible. This builds a broader and deeper understanding and ultimately a healthier interaction. In the event that an issue cannot be resolved locally, please feel free to report your concerns by contacting a community moderator or staff member. Your report will be handled in accordance with the issue resolution process described below. In your report, please include: Names (real or usernames) of any individuals involved, including witnesses. Your account of what occurred and if you believe the incident is ongoing. If there is a publicly visible record (such as a forum post), please include a link or a screenshot of the content. Any additional information that may be helpful. All reports will be reviewed by a community moderator and will result in a response that is deemed necessary and appropriate to the circumstances. Where additional perspectives are needed, the moderator may seek insight from other members of the moderation team. The confidentiality of the person reporting the incident will be kept at all times. Involved parties are never part of the review team. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the reviewing moderator may take any action they deem appropriate, including a permanent ban from the community. Resolution Process A report will kick off the following process. Your message will be acknowledged within one business day. Within the following business day, a moderator from the community moderation team or the LuzFaltex moderation team will review your concern. The moderator will not be anyone directly involved with the issue that has been raised. From there, the moderator will work with you and the others involved to come to a conclusion. While issue complexity varies, the goal is to resolve issues within five working days. All communication will be confidential with very limited circulation. How does the moderation team work? Beyond the norms and values set out by the Code of Conduct, moderators operate under the following principals: Less is more - As much as possible, let the community work it out. It is much better to have communities self-correct than to have outsiders come in and \"fix\" problems. Equality - Contribution value or status in the community are not relevant to the review. Key people do not have more rights (either to abuse or to be protected from abuse) than others in the community. Independence - Moderators must act and be seen to act as a neutral party. *This code of conduct is based on the Microsoft Open Source Code of Conduct ."
  },
  "contribute/validation-reference/locale-specific-links.html": {
    "href": "contribute/validation-reference/locale-specific-links.html",
    "title": "Locale-specific links | LuzFaltex Documentation",
    "keywords": "Locale-specific links Locale codes, such as en-us , should not be included in links to certain Microsoft sites. If you include a locale code in a link in English content, it will also be included in localized links, which leads to a bad localized experience. For example, if a link in German localized content includes en-us , German customers will find themselves linking to the English article, even if a German version is available. Remove locale codes from links to Microsoft sites. The following is an example. Before: https://docs.microsoft.com/en-us/vsts/load-test/app-service-web-app-performance-test After: https://docs.microsoft.com/vsts/load-test/app-service-web-app-performance-test The following sites are in scope for this validation: azure.microsoft.com docs.microsoft.com msdn.microsoft.com technet.microsoft.com"
  },
  "contribute/validation-reference/index.html": {
    "href": "contribute/validation-reference/index.html",
    "title": "Docs PR validation service | LuzFaltex Documentation",
    "keywords": "Docs PR validation service The Docs PR validation service is a GitHub app that runs validation rules on the files in a PR. When the validation service is enabled on a repo, you'll see the following behavior: You submit a PR. In the GitHub comment that indicates the status of your PR, you'll see the status of \"checks\" enabled on the repo. Note that in this example, there are two checks enabled, \"Commit Validation\" and \"OpenPublishing.Build\": Build can pass even if commit validation fails. Click Details for more information. On the Details page, you'll see all the validation checks that failed, with information about how to fix the issues: See the left-hand TOC of this article for the list of validations currently in the service."
  },
  "contribute/code/coding-style.html": {
    "href": "contribute/code/coding-style.html",
    "title": "C# Coding Style | LuzFaltex Documentation",
    "keywords": "C# Coding Style The general rule we follow is \"use Visual Studio defaults\". We use Allman style braces, where each brace begins on a new line. A single line statement block can go without braces, but the block must be properly indented on its own line and must not be nested in other statement blocks that use braces. One exception is that a using statement is permitted to be nested within another using statement by starting on the following line at the same indentation level, even if the nested using statement contains a controlled block. We use four spaces of indentation (no tabs). we use _camelCase for internal and private fields and use readonly wherever possible. Prefix internal and private instance fields with _ , static fields with s_ , and thread static fields with t_ . When used on static fields, readonly should come after static (i.e. static readonly not readonly static ). Public fields should be used sparingly and should use PascalCasing with no prefix when used. We avoid this. unless absolutely necessary. We always specify the visibility, even if it's the default (e.g. private string _foo , not string _foo ). Visibility should be the first modifier (i.e. public abstract not abstract public ). Namespace imports should be specified at the top of the file, outside of namespace declarations, and should be sorted alphabetically, with the exception of System.* namespaces, which are to be placed on top of all others. Avoid more than one empty line at a time. For example, do not have two blank lines between members of a type. Avoid spurious free spaces. For example, avoid if (someVar == 0)... where the dots mark the spurious free spaces. Consider enabling \"View White Space ( ctrl + E , S )\" if using Visual Studio to aid detection. If a file happens to differ in style from these guidelines (e.g. private members are named m_member rather than _member ), the existing style in that file takes precedence. We only use var when it's obvious what the variable type is (e.g. var stream = new FileStream(...) not var stream = OpenStandardOutput() ). We use language keywords instead of BCL types (i.e. int, string, float instead of Int32, String, Single , etc.) for both type references as well as method calls ( int.Parse instead of Int32.Parse ). We use PascalCasing to name all of our constant local variables and fields. The only exception is for interop code where the constant value should exactly match the name and value of the code you are calling via interop. We use nameof(...) instead of \"...\" wherever possible and relevant. Fields should be specified at the top within type declarations. When including non-ASCII characters in the source code, use Unicode escape sequences ( \\uXXXX ) instead of literal characters. Literal non-ASCII characters occasionally get garbled by a tool or editor. When using labels (for goto), indent the label one less than the current indentation. Example file: ObservableLinkedList`1.cs: using System; using System.Collections; using System.Collections.Generic; using System.Collections.Specialized; using System.ComponentModel; using System.Diagnostics; using Microsoft.Win32; namespace System.Collections.Generic { public partial class ObservableLinkedList<T> : INotifyCollectionChanged, INotifyPropertyChanged { private ObservableLinkedListNode<T> _head; private int _count; public ObservableLinkedList(IEnumerable<T> items) { if (items == null) throw new ArgumentNullException(nameof(items)); foreach (T item in items) { AddLast(item); } } public event NotifyCollectionChangedEventHandler CollectionChanged; public int Count { get { return _count; } } public ObservableLinkedListNode AddLast(T value) { var newNode = new LinkedListNode<T>(this, value); InsertNodeBefore(_head, node); } protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e) { NotifyCollectionChangedEventHandler handler = CollectionChanged; if (handler != null) { handler(this, e); } } private void InsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { ... } ... } }"
  },
  "contribute/code/api-review.html": {
    "href": "contribute/code/api-review.html",
    "title": "API Review Process | LuzFaltex Documentation",
    "keywords": "API Review Process The LuzFaltex Core framework takes API usability extremely seriously. Thus, we generally review every single API that is added to the product. This page discusses how we conduct design reviews for components that are open sourced. Which APIs should be reviewed? The rule of thumb is that we review every API that is being to the LuzFaltex.* namespaces. Steps Requester files an issue . The issue description should contain a speclet that represents a sketch of the new APIs, including samples on how the APIs are being used. The goal isn't to get a complete API list, but a good example on how the new APIs would roughly look like and in what scenarios they would be used. Here is a good example . We assign an owner . We'll assign a dedicated owner from our side that sponsors the issue. This is usually the area owner for which the API proposal or design change was filed for. Discussion . The goal of the discussion is to help the assignee make a decision whether we want to pursue the proposal or not. In this phase, the goal isn't necessarily to perform an in-depth review; rather, we want to make sure that the proposal is actionable, i.e. has a concrete design, a sketch of the APIs, and some code samples that show how it should be used. If changes are necessary, the requester is encouraged to edit the issue description. This allows folks joining later to understand the most recent proposal. To avoid confusion, the requester should maintain a tiny change log, like a bolded \"Updates:\" followed by a bullet point list of the updates that were being made. * Owner makes decision . When the owner believes enough information is available to make a decision, they will update the issue accordingly: Mark for review . If the owner believes the proposal is actionable, they will label the issue with api-ready-for-review . Close as not actionable . Incase the issue didn't get enough traction to be distilled into a concrete proposal, they will close the issue. Close as won't fix as proposed . Sometimes, the issue that is raised is a good one but the owner thinks the concrete proposal is not the right way to tackle the problem. In most cases, the owner will try to steer the discussion in a direction that results in a design that we believe is appropriate. However, for some proposals the problem is at the heart of the design which can't be easily changed without starting a new proposal. In those cases, the owner will close the issue and explain the issue the design has. Close as won't fix . Similarly, if the proposal is taking the product in a direction we simply don't want to go, the issue might get closed. In that case, the problem isn't the proposed the design but the issue itself. API gets reviewed . The group conducting the review is called FXDC , which stands for framework design core . In the review, we'll take notes and provide feedback. After the review, we'll publish the notes in the API Review Repository. A good example of this is the review of immutable collections . Multiple outcomes are possible: Approved . In this case, the label api-ready-for-review is replaced with api-approved . Needs work . In case we believe the proposal isn't ready yet, we'll replace the label api-ready-for-review with api-needs-work . Rejected . In case we we believe the proposal isn't a direction we want to go after, we simply write a comment and close the issue. API Design Guidelines The .NET design guidelines are captured in the famous book Framework Design Guidelines by Krysztof Cwalina and Brad Abrams. A digest of the most important guidelines are available in our documentation . Long term, we'd like to publish the individual guidelines in a standalone repo on which we can also accept PRs and -- more importantly for API reviews -- link to. API Review Notes The API review notes are being published in the API Review Repository (coming soon)."
  },
  "contribute/quick-create.html": {
    "href": "contribute/quick-create.html",
    "title": "Quickstart: Set and retrieve a secret from Azure Key Vault | Microsoft Docs | LuzFaltex Documentation",
    "keywords": "Quickstart: Set and retrieve a secret from Azure Key Vault This quickstart shows you how to store a secret in Key Vault and how to retrieve it using a Web app. To see the secret value you would have to run this on Azure. The quickstart uses Node.js and Managed service identities (MSIs). Create a Key Vault. Store a secret in the Key Vault. Retrieve a secret from Key Vault. Create an Azure Web Application. Enable managed service identities . Grant the required permissions for the web application to read data from Key vault. Before you proceed make sure that you are familiar with the basic concepts . Note To understand why the below tutorial is the best practice we need to understand a few concepts. Key Vault is a central repository to store secrets programmatically. But to do so applications / users need to first authenticate to Key Vault i.e. present a secret. To follow security best practices this first secret needs to be rotated periodically as well. But with Managed Service Identity , applications that run in Azure are given an identity which is automatically managed by Azure. This helps solve the Secret Introduction Problem where users / applications can follow best practices and not have to worry about rotating the first secret Prerequisites Node JS Visual Studio 2017 version 15.7.3 or later with the following workloads: ASP.NET and web development .NET Core cross-platform development .NET Core 2.1 SDK or later Git ( download ). An Azure subscription. If you don't have an Azure subscription, create a free account before you begin. Azure CLI version 2.0.4 or later. This is available for Windows, Mac, and Linux. Login to Azure To log in to Azure using the CLI, you can type: az login Create resource group Create a resource group with the az group create command. An Azure resource group is a logical container into which Azure resources are deployed and managed. Please select a Resource Group name and fill in the placeholder. The following example creates a resource group named in the eastus location. # To list locations: az account list-locations --output table az group create --name \"<YourResourceGroupName>\" --location \"East US\" The resource group you just created is used throughout this tutorial. Create an Azure Key Vault Next you create a Key Vault using the resource group created in the previous step. Although “ContosoKeyVault” is used as the name for the Key Vault throughout this article, you have to use a unique name. Provide the following information: Vault name - Select a Key Vault Name here . Resource group name - Select a Resource Group Name here . The location - East US . az keyvault create --name \"<YourKeyVaultName>\" --resource-group \"<YourResourceGroupName>\" --location \"East US\" At this point, your Azure account is the only one authorized to perform any operations on this new vault. Add a secret to key vault We're adding a secret to help illustrate how this works. You could be storing a SQL connection string or any other information that you need to keep securely but make available to your application. In this tutorial, the password will be called AppSecret and will store the value of MySecret in it. Type the commands below to create a secret in Key Vault called AppSecret that will store the value MySecret : az keyvault secret set --vault-name \"<YourKeyVaultName>\" --name \"AppSecret\" --value \"MySecret\" To view the value contained in the secret as plain text: az keyvault secret show --name \"AppSecret\" --vault-name \"<YourKeyVaultName>\" This command shows the secret information including the URI. After completing these steps, you should have a URI to a secret in an Azure Key Vault. Write this information down. You need it in a later step. Clone the Repo Clone the repo in order to make a local copy for you to edit the source by running the following command: git clone https://github.com/Azure-Samples/key-vault-node-quickstart.git Install dependencies Here we install the dependencies. Run the following commands: cd key-vault-node-quickstart npm install This project used 2 node modules: ms-rest-azure azure-keyvault Publish the web application to Azure Below are the few steps we need to do to publish the application to Azure. The 1st step is to create a Azure App Service Plan. You can store multiple web apps in this plan. az appservice plan create --name myAppServicePlan --resource-group myResourceGroup Next we create a web app. In the following example, replace <app_name> with a globally unique app name (valid characters are a-z, 0-9, and -). The runtime is set to NODE|6.9. To see all supported runtimes, run az webapp list-runtimes az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app_name> --runtime \"NODE|6.9\" --deployment-local-git When the web app has been created, the Azure CLI shows output similar to the following example: { \"availabilityState\": \"Normal\", \"clientAffinityEnabled\": true, \"clientCertEnabled\": false, \"cloningInfo\": null, \"containerSize\": 0, \"dailyMemoryTimeQuota\": 0, \"defaultHostName\": \"<app_name>.azurewebsites.net\", \"enabled\": true, \"deploymentLocalGitUrl\": \"https://<username>@<app_name>.scm.azurewebsites.net/<app_name>.git\" < JSON data removed for brevity. > } Browse to your newly created web app and you should see a functioning web app. Replace <app_name> with a unique app name. http://<app name>.azurewebsites.net The above command also creates a Git-enabled app which allows you to deploy to azure from your local git. Local git is configured with url of 'https:// @<app_name>.scm.azurewebsites.net/<app_name>.git' Create a deployment user After the previous command is completed you can add add an Azure remote to your local Git repository. Replace with the URL of the Git remote that you got from Enable Git for your app. git remote add azure <url> Open and edit the solution Edit the program.cs file to run the sample with your specific key vault name: Browse to the folder key-vault-dotnet-core-quickstart. Open the key-vault-dotnet-core-quickstart.sln file in Visual Studio 2017. Open the Program.cs file and update the placeholder YourKeyVaultName with the name of your key vault that you created earlier. This solution uses AppAuthentication and KeyVault NuGet libraries. Run the app From the main menu of Visual Studio 2017, select Debug > Start without debugging. When the browser appears, go to the About page. The value for AppSecret is displayed. Publish the web application to Azure Publish this app to Azure to see it live as a web app, and to see that you can fetch the secret value: In Visual Studio, select the key-vault-dotnet-core-quickstart project. Select Publish > Start . Create a new App Service , and then select Publish . Change the app name to keyvaultdotnetcorequickstart . Select Create . Enable managed service identities Azure Key Vault provides a way to securely store credentials and other keys and secrets, but your code needs to authenticate to Azure Key Vault to retrieve them. Managed Service Identity makes this easier by giving Azure services an automatically managed identity in Azure Active Directory (Azure AD). You can use this identity to authenticate to any service that supports Azure AD authentication, including Key Vault, without having any credentials in your code. Return to the Azure CLI. Run the assign-identity command to create the identity for this application: az webapp identity assign --name \"keyvaultdotnetcorequickstart\" --resource-group \"<YourResourceGroupName>\" Note The command in this procedure is the equivalent of going to the portal and switching Managed service identity to On in the web application properties. Assign permissions to your application to read secrets from Key Vault Make a note of the output when you publish the application to Azure. It should be of the format: { \"principalId\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"tenantId\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"type\": \"SystemAssigned\" } Then, run this command by using the name of your key vault and the value of PrincipalId : az keyvault set-policy --name '<YourKeyVaultName>' --object-id <PrincipalId> --secret-permissions get Deploy the Node App to Azure and retrieve the secret value Now that everything is set. Run the following command to deploy the app to Azure git push azure master After this when you browse https://<app_name>.azurewebsites.net you can see the secret value. Make sure that you replaced the name with your vault name Now when you run the application, you should see your secret value retrieved. Next steps Azure Key Vault Home Page Azure Key Vault Documentation Azure SDK For Node Azure REST API Reference Azure Key Vault home page Azure Key Vault documentation Azure SDK For .NET Azure REST API reference"
  },
  "contribute/how-to-write-links.html": {
    "href": "contribute/how-to-write-links.html",
    "title": "How to use links in documentation | LuzFaltex Documentation",
    "keywords": "Using links in documentation This article describes how to use hyperlinks from pages hosted at docs.luzfaltex.com. Links are easy to add into markdown with a few varying conventions. Links point users to content in the same page, point off into other neighboring pages, or point to external sites and URLs. The docs.luzfaltex.com site backend uses Open Publishing Services (OPS) which implements DocFX Flavored Markdown (DFM). DFM is highly compatible with GitHub Flavored Markdown (GFM), and DFM adds additional functionality through Markdown extensions. Important All links must be secure ( https vs http ) whenever the target supports it (which the vast majority should). Link text The words that you include in link text should be friendly. In other words, they should be normal English words or the title of the page that you're linking to. Important Do not use \"click here.\" It's bad for SEO and doesn't adequately describe the target. Correct: For more information, see the [contributor guide index](https://github.com/LuzFaltex/docs/blob/master/docs/contribute/index.md). For more details, see the [SET TRANSACTION ISOLATION LEVEL](https://msdn.microsoft.com/library/ms173763.aspx) reference. Incorrect: For more details, see [https://msdn.microsoft.com/library/ms173763.aspx](https://msdn.microsoft.com/library/ms173763.aspx). For more information, click [here](https://github.com/LuzFaltex/docs/blob/master/docs/contribute/index.md). Links from one article to another To create an inline link from a Docs technical article to another Docs technical article within the same docset, use the following link syntax: An article in a directory links to another article in the same directory: [link text](article-name.md) An article links from a subdirectory to an article in the root directory: [link text](../article-name.md) An article in the root directory links to an article in a subdirectory: [link text](./directory/article-name.md) An article in a subdirectory links to an article in another subdirectory: [link text](../directory/article-name.md) An article linking across docsets (even if in the same repository): [link text](./directory/article-name) Important None of the above examples use the ~/ as part of the link. If you are linking to a path at the root of the repository, start with the / . Including the ~/ produces invalid links when navigating the source repositories on GitHub. Starting the path with / resolves correctly. Links to anchors You do not have to create anchors. They're automatically generated at publishing time for all H2 headings. The only thing you have to do is create links to the H2 sections. To link to a heading within the same article: [link](#the-text-of-the-H2-section-separated-by-hyphens) [Create cache](#create-cache) To link to an anchor in another article in the same subdirectory: [link text](article-name.md#anchor-name) [Configure your profile](media-services-create-account.md#configure-your-profile) To link to an anchor in another service subdirectory: [link text](../directory/article-name.md#anchor-name) [Configure your profile](../directory/media-services-create-account.md#configure-your-profile) Links from includes Because include files are located in another directory, you must use longer relative paths. To link to an article from an include file, use this format: [link text](../articles/folder/article-name.md) Links in selectors If you have selectors that are embedded in an include--as does the Azure documentation team--use the following link structure: > [AZURE.SELECTOR-LIST (Dropdown1 | Dropdown2 )] - [(Text1 | Example1 )](../articles/folder/article-name1.md) - [(Text1 | Example2 )](../articles/folder/article-name2.md) - [(Text2 | Example3 )](../articles/folder/article-name3.md) - [(Text2 | Example4 )](../articles/folder/article-name4.md) --> Reference-style links You can use reference-style links to make your source content easier to read. Reference-style links replace inline link syntax with simplified syntax that allows you to move the long URLs to the end of the article. Here's Daring Fireball 's example: Inline text: I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. Link references at the end of the article: <!--Reference links in article--> [1]: http://google.com/ [2]: http://search.yahoo.com/ [3]: http://search.msn.com/ Make sure that you include the space after the colon, before the link. When you link to other technical articles, if you forget to include the space, the link will be broken in the published article. Links to pages that are not part of the technical documentation set To link to a page on another LuzFaltex property (such as a pricing page, SLA page, or anything else that is not a documentation article), use an absolute URL. The goal here is that links work in GitHub and on the rendered site: [link text](https://www.luzfaltex.com/forum/thread/1-welcome/) Links to third-party sites The best user experience minimizes sending users to another site. So base any links to third-party sites, which we do sometimes need, on this info: Accountability : Link to third-party content when it's the third-party's information to share. For example, it's not LuzFaltex's place to tell people how to use Android developer tools--that is Google's story to tell. If we need to, we can explain how to use Android developer tools with Azure, but Google should tell the story of how to use their tools. PM signoff : Request that LuzFaltex sign off on third-party content. By linking to it, we are saying something about our trust in it and our obligation if people follow the instructions. Freshness reviews : Make sure that the third-party info is still current, correct, and relevant, and that the link hasn’t changed. Offsite : Make users aware that they are going to another site. If the context does not make that clear, add a qualifying phrase. For example: “Prerequisites include the Android Developer Tools, which you can download on the Android Studio site.” Next steps : It’s fine to add a link to, say, an MVP blog in a \"Next steps\" section. Again, just make sure that users understand they’ll be leaving the site. Legal : We are covered legally under Links to Third Party Sites in the Terms of Use footer on every LuzFaltex.com page. Links to MSDN or TechNet When you need to link to MSDN or TechNet, use the full link to the topic, and remove the \"en-us\" language locale from the link."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | LuzFaltex Documentation",
    "keywords": "Add your introductions here!"
  },
  "articles/immutable-laws.html": {
    "href": "articles/immutable-laws.html",
    "title": "Microsoft's Ten Immutable Laws of Security (Version 2.0) | LuzFaltex Documentation",
    "keywords": "Microsoft's Ten Immutable Laws of Security (Version 2.0) Note These laws refer to security vulnerabilities that do not have a fix. It isn't possible for LuzFaltex, or any software vendor for that matter, to \"fix\" these issues, as they are formed as a consequence of how computers work. Below is the original article from Microsoft, with some formatting modifications to make reading easier. Here at the Microsoft Security Response Center, we investigate thousands of security reports every year. In some cases, we find that a report describes a bona fide security vulnerability resulting from an issue in one of our products; when this happens, we develop a corrective update as quickly as possible. In other cases, the reported problems simply result from a mistake someone made in using the product, or our investigation finds a problem with the product that, while troublesome for users, does not expose them to a security vulnerability. But many fall in between. They are genuine security problems, but the problems don't result from product flaws. Over the years, we've developed a list of issues like these that we call the 10 Immutable Laws of Security. Don't hold your breath waiting for an update that will protect you from the issues we'll discuss below. It isn't possible for Microsoft—or any software vendor—to \"fix\" them, because they result from the way computers work. But don't abandon all hope yet. Sound judgment is the key to protecting yourself against these pitfalls, and if you keep them in mind, you can significantly improve the security of your computers, whether they sit on your desk, travel in your pocket, or exist in a virtual cloud. (Throughout this list we’ll use “computer” to mean all of those objects, by the way.) The 10 Immutable Laws If a bad guy can persuade you to run his program on your computer, it's not solely your computer anymore. If a bad guy can alter the operating system on your computer, it's not your computer anymore. If a bad guy has unrestricted physical access to your computer, it's not your computer anymore. If you allow a bad guy to run active content on your website, it's not your website anymore. Weak passwords trump strong security. A computer is only as secure as the administrator is trustworthy. Encrypted data is only as secure as its decryption key. An out-of-date antimalware scanner is only marginally better than no scanner at all. Absolute anonymity isn't practically achievable, online or offline. Technology is not a panacea. Law #1: If a bad guy can persuade you to run his program on your computer, it's not solely your computer anymore It's an unfortunate fact of computer science: when a computer program runs, it will do what it's programmed to do, even if it's programmed to be harmful. When you choose to run a program, you are making a decision to turn over a certain level of control of your computer to it -- often anything up to the limits of what you yourself can do on the computer (and sometimes beyond). It could monitor your keystrokes and send them to criminals eager for the information. It could open every document on the computer, and change the word \"will\" to \"won't\" in all of them. It could send rude emails to all your friends. It could install a virus. It could create a \"back door\" that lets someone remotely control your computer. It could relay a bad guy’s attack on someone else’s computers. Or it could just reformat your hard drive. That's why it's important never to run a program from an untrusted source, and to limit the ability of others to make that decision for you on your computer. There's a nice analogy between running a program and eating a sandwich. If a stranger walked up to you and handed you a sandwich, would you eat it? Probably not. How about if your best friend gave you a sandwich? Maybe you would, maybe you wouldn't—it depends on whether she made it or found it lying in the street. Apply the same critical thought to a program that you would to a sandwich, and you'll usually be safe. Law #2: If a bad guy can alter the operating system on your computer, it's not your computer anymore In the end, an operating system is just a series of ones and zeroes that, when interpreted by the processor, cause the computer to do certain things. Change the ones and zeroes, and it will do something different. Where are the ones and zeroes stored? On the computer, right along with everything else! They're just files, and if other people who use the computer are permitted to change those files, it's \"game over.” To understand why, consider that operating system files are among the most trusted ones on the computer, and they generally run with system-level privileges. That is, they can do absolutely anything. Among other things, they're trusted to manage user accounts, handle password changes, and enforce the rules governing who can do what on the computer. If a bad guy can change them, the now-untrustworthy files will do his bidding, and there's no limit to what he can do. He can steal passwords, make himself an administrator on the computer, or add entirely new functions to the operating system. To prevent this type of attack, make sure that the system files (and the registry, for that matter) are well protected. In modern operating systems, default settings largely prevent anyone but administrators from making such bedrock changes. Preventing rogue programs from gaining administrative-level access is the best way of protecting the operating system. That’s best accomplished by not operating your computer from an account with administrative privileges except when specific tasks make it absolutely necessary – and logging out of that high-privilege mode as quickly as possible once your task is complete. Home users should consider creating an “everyday” account set to operate with standard-level user permissions. On those relatively rare occasions when you really do need to make big changes, you can log into the administrative account, do whatever needs to be done, and switch back to the safer account when you’re finished. Law #3: If a bad guy has unrestricted physical access to your computer, it's not your computer anymore Oh, the things a bad guy can do if he can lay his hands on your computer! Here's a sampling, going from Stone Age to Space Age: He could mount the ultimate low-tech denial of service attack, and smash your computer with a sledgehammer. He could unplug the computer, haul it out of your building, and hold it for ransom. He could boot the computer from removable media, and reformat your hard drive. But wait, you say, I've configured the BIOS on my computer to prompt for a password when I turn the power on. No problem – if he can open the case and get his hands on the system hardware, he could just replace the BIOS chip. (Actually, there are even easier ways). He could remove the hard drive from your computer, install it into his computer, and read any unencrypted data. He could duplicate your hard drive and take it back to his lair. Once there, he'd have all the time in the world to conduct brute-force attacks, such as trying every possible logon or decryption password. Programs are available to automate this and, given enough time, it's almost certain that he would succeed. Once that happens, Laws #1 and #2 above apply. He could add a recording device or transmitter to your keyboard, then monitor everything you type including your passwords. Always make sure that a computer is physically protected in a way that's consistent with its value—and remember that the value of a computer includes not just the value of the hardware itself, but the value of the data on it, and the value of the access to your network that a bad guy could gain. At a minimum, business-critical computers such as domain controllers, database servers, and print/file servers should always be in a locked room that only people charged with administration and maintenance can access. But you may want to consider protecting other computers as well, and potentially using additional measures to guard their physical integrity. If you travel with a laptop or other portable computer, it's absolutely critical that you protect it. The same features that make them great to travel with – small size, light weight, and so forth – also make them easy to steal. There are a variety of locks and alarms available for laptops, some models let you remove the hard drive and carry it with you, and almost all can be used with extremely small, extremely portable storage – e.g. USB thumb drives – for storing your data while you travel. You also can use features such as drive encryption available in most modern operating systems to mitigate the damage if someone succeeded in stealing the computer, or to retain some confidence in its protection if it’s taken from you in an unexpected bag check or unfriendly border crossing. If the computer walks off or is lost, you’ll still need to address the loss of the hardware, but it’ll be harder for your data to be disclosed without your knowledge. But the only way you can know with 100% certainty that your data is safe and the hardware hasn't been tampered with, is to keep them on your person at all times while traveling. Law #4: If you allow a bad guy to run active content on your website or online application, it's not your website any more In Law #1, a bad guy tricks you into downloading a harmful program and running it, giving him control over your computer and its data – at least as much control as you had. But what about the reverse: if he can upload active content – programs, scripts, or even documents and pictures designed to crash peoples’ computers in specific ways – and have them served from your website or online application? Your site becomes his platform for reaching out to capture data from site visitors or harm their computers, or reaching inward towards other systems that support your site. If you run a website or hosted applications, you need to limit what visitors can do. Some sites provide an open forum for people to upload and distribute software, code or configurations – and that’s fine as long as visitors understand Law #1 and the risks that come along with their downloads. But if the bad guy’s uploaded programs actually run on your server or in the browser of visitors, he effectively own your site and can impersonate you. Worse, the bad guy could gain your rights to the underlying systems, and might find a way to extend his control to the servers, data storage or network itself. If your site is on shared infrastructure or a cloud-based service, this can put other sites and data at risk, and potentially create interesting liabilities for yourself and other people. A properly administered site host or cloud service will have taken many of these risks into account and will disallow scripts or programs uploaded to the service from affecting other accounts that happen to share the same resources. Just the same, you should only allow a program to run on your site or as part of your application if you wrote it yourself or if you trust the developer who wrote it, and make sure your operations and maintenance processes don’t run afoul of the host administrator’s security policies. Law #5: Weak passwords trump strong security The purpose of having a logon process is to establish who you are. Once the operating system knows who you are, it can grant or deny requests for system resources appropriately. If a bad guy learns your password, he can log on as you. In fact, as far as the operating system is concerned, he is you. Whatever you can do on the system, he can do as well, because he is you. Maybe he wants to read sensitive information you've stored on your computer, like your e-mail. Maybe you have more privileges on the network than he does, and being you will let him do things he normally couldn't. Or maybe he just wants to do something malicious and blame it on you. In any case, it's worth protecting your credentials. Always use a password on your computer—it's amazing how many accounts have blank passwords. And develop a complex one. Don't use your dog's name, your anniversary date, the name of the local football team, or QWERTY / 12345 / other basic keyboard patterns – and avoid using single “dictionary words” (that is, words that can be looked up in the dictionary). And don't use the word \"password!\" Build a password that has a mix of upper- and lower-case letters, numbers, punctuation marks, and so forth. Make it as long as possible; consider using two words in combination. (If you speak multiple languages, you might choose to mix tongues in your password for extra complexity.) And change it often. Once you've picked a strong password, handle it appropriately. Don't write it down. If you absolutely must write it down, at the very least keep it in a safe, a locked drawer, or perhaps deep in your wallet—the first thing a bad guy who's hunting for passwords will do is check for a yellow sticky note on the side of your screen, or in the top desk drawer. Don't tell anyone what your password is, and don’t ask for theirs. Managers, kids, and even IT helpdesk staff should rarely if ever ask for your password. Modern operating systems and programs allow you to give other people permission to see and use your files, without giving out your password so they can impersonate you. Remember what Ben Franklin said: two people can keep a secret, but only if one of them is dead. If you have accounts for multiple computers and online services, you’ll need to balance requirements for unique and strong passwords, yet limit how many passwords you have to remember. For accounts that give access to your most critical information – financial accounts, regulated personal data, sensitive work access, and primary email accounts to name a few – use a unique password for each one, and follow their access management policies. If you’re awash in multiple accounts that gather little personal information and have low value if lost, such as news sites that require free registration, consider developing one reasonably strong password and reusing it for most or all of them. Finally, consider using something stronger than – and in addition to – passwords to identify yourself to the system. Windows, for instance, supports the use of smart cards, which significantly strengthens the account checking the system can perform. You may also want to consider biometric products such as fingerprint and retina scanners. “Two-factor authentication” of this sort incorporates not only something you know (your password) but something you own (a card) or even something you are (a person with your unique fingerprint or retina) – dramatically increasing authentication strength. Law #6: A computer is only as secure as the administrator is trustworthy Every computer must have an administrator: someone who can install software, configure the operating system, add and manage user accounts, establish security policies, and handle all the other management tasks associated with keeping a computer up and running. By definition, these tasks require that the individual have control over the computer. This puts the administrator in a position of unequalled power. An untrustworthy administrator can negate every other security measure you've taken. He can change the permissions on the computer, modify the system security policies, install malicious software, add bogus users, or do any of a million other things. He can subvert virtually any protective measure in the operating system, because he controls it. Worst of all, he can cover his tracks. If you have an untrustworthy administrator, you have absolutely no security. When hiring a system administrator, recognize the position of trust that administrators occupy, and only hire people who warrant that trust. Call his references, and ask them about his previous work record, especially with regard to any security incidents at previous employers. If appropriate for your organization, you may also consider taking a step that banks and other security-conscious companies do, and require that your administrators pass a complete background check at hiring time, and at periodic intervals afterward. Whatever criteria you select, apply them across the board. Don't give anyone administrative privileges on your network unless they've been vetted – and this includes temporary employees and contractors. Next, take steps to help keep honest people honest. Use sign-in/sign-out sheets or log access badge swipes to track who's been in the server room. (You do have a server room with a locked door, right? If not, re-read Law #3). Implement a \"two person\" rule when installing or upgrading software. Diversify management tasks as much as possible, as a way of minimizing how much power any one administrator has. Also, don't use the Administrator account—instead, give each administrator a separate account with administrative privileges, so you can tell who's doing what. Many industries require audit logs documenting all activities on covered business systems; audit trails can’t stop rogue admins from running amok, but they can record who did what if a problem is discovered later, and enforce a sense of individual accountability. Finally, consider taking steps to make it more difficult for a rogue administrator to cover his tracks. For instance, store audit data on write-only media, or house System A's audit data on System B, and make sure that the two systems have different administrators. The more accountable your administrators are, the less likely you are to have problems. Law #7: Encrypted data is only as secure as its decryption key Suppose you installed the biggest, strongest, most secure lock in the world on your front door, but you put the key under the front door mat. It wouldn't really matter how strong the lock is, would it? The critical factor would be the weak way the key was protected, because if a burglar could find it, he'd have everything he needed to open the lock. Encrypted data works the same way—no matter how strong the crypto algorithm is, the data is only as safe as the key that can decrypt it. Many operating systems and cryptographic software products give you an option to store cryptographic keys on the computer. The advantage is convenience – you don't have to handle the key – but it comes at the cost of security. Simply put, no matter how well the keys are hidden on the system, the software has to be able to find them – and if it can, so can a sufficiently motivated bad guy. A better solution is to store them in a protected repository. For instance, the Trusted Platform Module (TPM) chip that’s present on most computers is designed to strongly protect cryptographic keys, and release them only when a PIN is entered. Smart cards provide similar protection, and their portability means that you can also physically separate them from the computer. But the best “protected repository” is your brain – if the key is a word or phrase, memorize it. Law #8: An out-of-date malware scanner is only marginally better than no malware scanner at all Antimalware scanners work by comparing the data on your computer against a collection of malware \"signatures.\" Each signature is characteristic of a particular malware family, and when the scanner finds data in a file, email or elsewhere that matches the signature, it concludes that it's found trouble. It's vital that you keep your malware scanner's signature file up-to-date, as new malware is created every day. The problem actually goes a bit deeper than this, though. Typically, malware will do the greatest amount of damage during the early stages of its life, precisely because antimalware programs will not be able to detect it, let alone remove it. Once word gets around that new malware is on the loose and people update their signatures, the propagation of the problem falls off as protections spread through the ecosystem. The key is to get ahead of the curve, and have updated signature files on your computer before the malware reaches your machine. Virtually every maker of antimalware software provides a way to get free updated signature files from their website or from a dedicated update service. In fact, many have \"push\" services, in which they'll send notification every time a new signature file is released – several times a day, if necessary. Use these services. Also, keep the malware scanner itself—that is, the scanning software that uses the signature files—updated as well. Malware writers regularly develop new techniques and variations that require that scanners change how they do their work. Law #9: Absolute anonymity isn't practically achievable, online or offline All human interaction involves exchanging data of some kind. If someone weaves enough of that data together, they can identify you. Think about all the information that a person can glean in just a short conversation with you: In one glance, they can gauge your height, weight, and approximate age. Your accent will probably tell them what country you're from, and may even tell them what region of the country. If you talk about anything other than the weather, you'll probably tell them something about your family, your interests, where you live, and what you do for a living. It doesn't take long for someone to collect enough information to figure out who you are. If you use any payment system other than cash or any transportation other than your own two feet, you leave a trail of data breadcrumbs that can be used to reconstruct a personally identifiable “portrait” of you with remarkable accuracy. If you crave absolute anonymity, your best bet is to live in a cave and shun all human contact. The same thing is true of the Internet. If you visit a website, the owner can, if he's sufficiently motivated, find out who you are. After all, the ones and zeroes that make up the Web session have to be able to find their way to the right place, and that place is your computer. There are a lot of measures you can take to disguise the bits, and the more of them you use, the more thoroughly the bits will be disguised. For instance, you could use network address translation to mask your actual IP address, subscribe to an anonymizing service that launders bits by relaying them from one end of the ether to the other, use a different ISP account for different purposes, surf certain sites only from public kiosks, and so on. All of these make it more difficult to determine who you are, but none of them make it impossible. Do you know for certain who operates the anonymizing service? Maybe it's the same person who owns the website you just visited! Or what about that innocuous website you visited yesterday, that offered to mail you a free $10 off coupon? Maybe the owner is willing to share information with other website owners. If so, the second website owner may be able to correlate the information from the two sites and determine who you are. And anonymity is even less achievable when you factor in location data, which is gathered perpetually by mobile phones and often enough by Web sites, mapping your machine’s IP address to a real-world location with pretty decent accuracy. Does this mean that privacy is a lost cause? Not at all. Governments along with public and private entities continue to wrestle with how best to balance the need for personal data privacy with other concerns. What it means is that the best way for you to protect your privacy on the Internet is the same as the way you protect your privacy in normal life—through your behavior. Read the privacy statements on the websites you visit, and only do business with those whose data-sharing practices you understand and agree with. If sites you visit allow you to determine how and with whom information about you will be shared, learn how to adjust those settings and check yours regularly. If you're worried about cookies, disable them. Most importantly, remember that information shared by or about you online is only as safe as the least protective, least enforced privacy policies and settings with which it comes into contact. But if it's complete and total anonymity you want, better start looking for that cave. Law #10: Technology is not a panacea Technology can do some amazing things. Recent years have seen the development of ever-cheaper and more powerful hardware, software that harnesses that hardware to open new vistas for computer users, and services that change our expectations for both, as well as advancements in cryptography and other sciences. It's tempting to believe that technology can deliver a risk-free world if we just work hard enough. However, this is simply not realistic. Perfect security requires a level of perfection that simply doesn't exist, and in fact isn't likely to ever exist. This is true for software as well as virtually all fields of human interest. Software development is an imperfect science, and all software has bugs. Some of them can be exploited to cause security breaches. That's just a fact of life. But even if software could be made perfect, it wouldn't solve the problem entirely. Most attacks involve, to one degree or another, some manipulation of human nature, a process usually referred to as social engineering. Raise the cost and difficulty of attacking security technology, and bad guys respond by shifting their focus away from the technology and toward the human being at the console. It's vital that you understand your role in maintaining solid security, or you could become the chink in your own systems' armor. The solution is to recognize two essential points. First, security consists of both technology and policy—that is, it's the combination of the technology and how it's used that ultimately determines how secure your systems are. Second, security is a journey, not a destination—it isn't a problem that can be \"solved\" once and for all, but a constant series of moves and countermoves between the good guys and the bad guys. The key is to ensure that you have good security awareness and exercise sound judgment. There are resources available to help you do this. The Technet website, for instance, has hundreds of white papers, best practices guides, checklists and tools, and we're developing more all the time. Combine great technology with sound judgment, and you'll have more effective security."
  },
  "contribute/includes/contribute-how-to-write-workflows-major-change-definition.html": {
    "href": "contribute/includes/contribute-how-to-write-workflows-major-change-definition.html",
    "title": "| LuzFaltex Documentation",
    "keywords": "Making a large contribution . For instance, you might make contributions (additions, changes, or deletions) that span multiple articles and need to be committed and tested as one unit of work in a single pull request. Creating and publishing a new article , which typically requires a more robust local editor. Adding new images or updating images , which typically requires simultaneous creation of a new media subdirectory, image files, updates to image links in articles, and previewing markdown files in a local editor to test image rendering. Updating an article over a period of days before you publish . In these cases, you typically need to do regular integration of other changes that occur in the master branch. This integration is easier via Git Bash and local editing. You also run the risk of losing your edits if you do this via the GitHub UI and wait before you commit the changes. Making continual updates to the same article after a pull request has been opened (unless you are comfortable doing this via the GitHub UI). Using the GitHub UI has the potential to create multiple outstanding pull requests for the same file, which may conflict with one another."
  },
  "contribute/code/copyright.html": {
    "href": "contribute/code/copyright.html",
    "title": "Copyright | LuzFaltex Documentation",
    "keywords": "Copyright All LuzFaltex code copyrights are held by LuzFaltex LLC. Source License Open source LuzFaltex code is licensed using the MIT License . The Creative Commons Attribution Share Alike 4.0 International License license is used for documentation. Closed source LuzFaltex code is licensed using a proprietary license and access to the code is governed by a confidentiality agreement. Binary License LuzFaltex binaries generated from open source code is licensed under the same MIT license the source code is licensed under, with the same copyright holder. LuzFaltex binaries generated from closed source code will be licensed at the per-product level. Please see the licence for the product in question for more information."
  },
  "contribute/how-to-write-use-markdown.html": {
    "href": "contribute/how-to-write-use-markdown.html",
    "title": "How to use Markdown for writing Docs | LuzFaltex Documentation",
    "keywords": "How to use Markdown for writing Docs Docs.luzfaltex.com articles are written in a lightweight markup language called Markdown , which is both easy to read and easy to learn. Because of this, it has quickly become an industry standard. Because Docs content is stored in GitHub, it can use a superset of Markdown called GitHub Flavored Markdown (GFM) , which provides additional functionality for common formatting needs. Additionally, Open Publishing Services (OPS) implements Markdig Markdown Parser. Markdig is highly compatible with GitHub Flavored Markdown (GFM), adding functionality to enable Docs-specific features. Markdig is a fast, powerful, CommonMark compliant, extensible Markdown processor for .NET. https://github.com/lunet-io/markdig Better community support Better standards support Markdown basics Headings To create a heading, you use a hash mark (#), as follows: # This is heading 1 ## This is heading 2 ### This is heading 3 #### This is heading 4 Bold and italic text To format text as bold , you enclose it in two asterisks: This text is **bold**. To format text as italic , you enclose it in a single asterisk: This text is *italic*. To format text as both bold and italic , you enclose it in three asterisks: This is text is both ***bold and italic***. Lists Unordered list To format an unordered/bulleted list, you can use either asterisks or dashes. For example, the following Markdown: - List item 1 - List item 2 - List item 3 will be rendered as: List item 1 List item 2 List item 3 To nest a list within another list, indent the child list items. For example, the following Markdown: - List item 1 - List item A - List item B - List item 2 will be rendered as: List item 1 List item A List item B List item 2 Ordered list To format an ordered/stepwise list, you use corresponding numbers. For example, the following Markdown: 1. First instruction 2. Second instruction 3. Third instruction will be rendered as: First instruction Second instruction Third instruction To nest a list within another list, indent the child list items. For example, the following Markdown: 1. First instruction 1. Sub-instruction 2. Sub-instruction 2. Second instruction will be rendered as: First instruction Sub-instruction Sub-instruction Second instruction Tables Tables are not part of the core Markdown specification, but GFM supports them. You can create tables by using the pipe (|) and hyphen (-) characters. Hyphens create each column's header, while pipes separate each column. Include a blank line before your table so it's rendered correctly. For example, the following Markdown: | Fun | With | Tables | | :------------------- | -------------------: |:---------------:| | left-aligned column | right-aligned column | centered column | | $100 | $100 | $100 | | $10 | $10 | $10 | | $1 | $1 | $1 | will be rendered as: Fun With Tables left-aligned column right-aligned column centered column $100 $100 $100 $10 $10 $10 $1 $1 $1 For more information on creating tables, see: The Markdig table wrapping feature , which can help with formatting of wide tables GitHub's Organizing information with tables The Markdown Tables Generator web app Adam Pritchard's Markdown Cheatsheet Michel Fortin's Markdown Extra Convert HTML tables to Markdown Links The Markdown syntax for an inline link consists of the [link text] portion, which is the text that will be hyperlinked, followed by the (file-name.md) portion, which is the URL or file name that's being linked to: [link text](file-name.md) For more information on linking, see: The Markdown syntax guide for details on Markdown's base linking support. The Links section of this guide for details on additional linking syntax that Markdig provides. Code snippets Markdown supports the placement of code snippets both inline in a sentence and as a separate \"fenced\" block between sentences. For details, see: Markdown's native support for code blocks GFM support for code fencing and syntax highlighting Fenced code blocks are an easy way to enable syntax highlighting for your code snippets. The general format for fenced code blocks is: ```alias ... your code goes in here ... ``` The alias after the initial three backtick (`) characters defines the syntax highlighting to be used. The following is a list of commonly used programming languages in Docs content and the matching label: These languages have friendly name support and most have language highlighting. Name Markdown Label .NET Console dotnetcli ASP.NET (C#) aspx-csharp ASP.NET (VB) aspx-vb AzCopy azcopy Azure CLI azurecli Azure PowerShell azurepowershell C++ cpp C++/CX cppcx C++/WinRT cppwinrt C# csharp CSHTML cshtml DAX dax F# fsharp Go go HTML html HTTP http Java java JavaScript javascript JSON json Markdown md NodeJS nodejs Objective-C objc OData odata PHP php Power Apps Formula powerappsfl PowerShell powershell Python python Q# qsharp Ruby ruby SQL sql Swift swift TypeScript typescript VB vb VSTS CLI vstscli XAML xaml XML xml Example: C# Markdown ```csharp // Hello1.cs public class Hello1 { public static void Main() { System.Console.WriteLine(\"Hello, World!\"); } } ``` Render // Hello1.cs public class Hello1 { public static void Main() { System.Console.WriteLine(\"Hello, World!\"); } } Example: SQL Markdown ```sql CREATE TABLE T1 ( c1 int PRIMARY KEY, c2 varchar(50) SPARSE NULL ); ``` Render CREATE TABLE T1 ( c1 int PRIMARY KEY, c2 varchar(50) SPARSE NULL ); OPS custom Markdown extensions Note Open Publishing Services (OPS) implements a Markdig Parser for Markdown, which is highly compatible with GitHub Flavored Markdown (GFM). Markdig adds some functionality through Markdown extensions. As such, selected articles from the full OPS Authoring Guide are included in this guide for reference. (For example, see \"Markdig and Markdown extensions\" and \"Code snippets\" in the table of contents.) Docs articles use GFM for most article formatting, such as paragraphs, links, lists, and headings. For richer formatting, articles can use Markdig features such as: Note blocks Includes Selectors Embedded videos Code snippets/samples For the complete list, refer to \"Markdig and Markdown extensions\" and \"Code snippets\" in the table of contents. Note blocks You can choose from four types of note blocks to draw attention to specific content: NOTE WARNING TIP IMPORTANT In general, note blocks should be used sparingly because they can be disruptive. Although they also support code blocks, images, lists, and links, try to keep your note blocks simple and straightforward. Includes When you have reusable text or image files that need to be included in article files, you can use a reference to the \"include\" file via the Markdig file include feature. This feature instructs OPS to include the file in your article file at build time, making it part of your published article. Three types of includes are available to help you reuse content: Inline: Reuse a common text snippet inline with within another sentence. Block: Reuse an entire Markdown file as a block, nested within a section of an article. Image: This is how standard image inclusion is implemented in Docs. An inline or block include is just a simple Markdown (.md) file. It can contain any valid Markdown. All include Markdown files should be placed in a common /includes subdirectory , in the root of the repository. When the article is published, the included file is seamlessly integrated into it. Here are requirements and considerations for includes: Use includes whenever you need the same text to appear in multiple articles. Use block includes for significant amounts of content--a paragraph or two, a shared procedure, or a shared section. Do not use them for anything smaller than a sentence. Includes won't be rendered in the GitHub rendered view of your article, because they rely on Markdig extensions. They'll be rendered only after publication. Ensure that all the text in an include is written in complete sentences or phrases that do not depend on preceding text or following text in the article that references the include. Ignoring this guidance creates an untranslatable string in the article that breaks the localized experience. Don't embed includes within other includes. They are not supported. Place media files in a media folder that's specific to the include subdirectory--for instance, the <repo> /includes/media folder. The media directory should not contain any images in its root. If the include does not have images, a corresponding media directory is not required. As with regular articles, don't share media between include files. Use a separate file with a unique name for each include and article. Store the media file in the media folder that's associated with the include. Don't use an include as the only content of an article. Includes are meant to be supplemental to the content in the rest of the article. Selectors Use selectors in technical articles when you author multiple flavors of the same article, to address differences in implementation across technologies or platforms. This is typically most applicable to our mobile platform content for developers. There are currently two different types of selectors in Markdig, a single selector and a multi-selector. Because the same selector Markdown goes in each article in the selection, we recommend placing the selector for your article in an include. Then you can reference that include in all your articles that use the same selector. Code snippets Markdig supports advanced inclusion of code in an article, via its code snippet extension. It provides advanced rendering that builds on GFM features such as programming language selection and syntax coloring, plus nice features such as: Inclusion of centralized code samples/snippets from an external repository. Tabbed UI to show multiple versions of code samples in different languages. Gotchas and troubleshooting Alt text Alt text that contains underscores won't be rendered properly. For example, instead of using this: ![ADextension_2FA_Configure_Step4] (./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG) Escape the underscores like this: ![ADextension\\_2FA\\_Configure\\_Step4] (./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG) Apostrophes and quotation marks If you copy from Word into a Markdown editor, the text might contain \"smart\" (curly) apostrophes or quotation marks. These need to be encoded or changed to basic apostrophes or quotation marks. Otherwise, you end up with things like this when the file is published: Itâ€™s Here are the encodings for the \"smart\" versions of these punctuation marks: Left (opening) quotation mark: &#8220; Right (closing) quotation mark: &#8221; Right (closing) single quotation mark or apostrophe: &#8217; Left (opening) single quotation mark (rarely used): &#8216; Angle brackets If you use angle brackets in text (not code) in your file--for example, to denote a placeholder--you need to manually encode the angle brackets. Otherwise, Markdown thinks that they're intended to be an HTML tag. For example, encode <script name> as &lt;script name&gt; See also Markdown resources Introduction to Markdown Docs Markdown cheat sheet GitHub's Markdown Basics"
  },
  "contribute/how-to-write-docs-auth-pack.html": {
    "href": "contribute/how-to-write-docs-auth-pack.html",
    "title": "Docs Authoring Pack for VS Code | LuzFaltex Documentation",
    "keywords": "Docs Authoring Pack for VS Code The Docs Authoring Pack is a collection of VS Code extensions to aid with Markdown authoring for docs.luzfaltex.com. The pack is available in the VS Code Marketplace and contains the following extensions: markdownlint : A popular Markdown linter by David Anson to help ensure your Markdown follows best practices. Code Spell Checker : A fully offline spell checker by Street Side Software. Docs Preview : Uses the docs.luzfaltex.com CSS for more accurate Markdown preview, including custom Markdown. Docs Markdown : Provides Markdown authoring assistance for docs.luzfaltex.com content in the Open Publishing System (OPS), including basic Markdown support and support for custom Markdown syntax in OPS. The rest of this topic describes the Docs Markdown extension. Docs Article Templates : Allows users to apply Markdown skeleton content to new files. Prerequisites and assumptions To accurately insert relative links, images, and other embedded content with the Docs Markdown extension, you must have your VS Code workspace scoped to the root of your cloned Open Publishing System (OPS) repo. Some syntax supported by the extension, such as alerts and snippets, are custom Markdown for OPS, and will not render correctly unless published via OPS. How to use the Docs Markdown extension To access the Docs Markdown menu, type ALT+M . You can click or use up/down arrows to select the function you want, or type to start filtering, then hit ENTER when the function you want is highlighted in the menu. The following are available: Function Description Preview Preview the active topic in a side-by-side window using the Docs Preview extension. This option is only available if Docs Preview is installed. Bold Formats text bold . Italic Formats text italic . Code If one line or less is selected, formats text as inline code . If multiple lines are selected, formats them as a fenced code block, and allows you to optionally select a programming language supported by OPS. Alert Inserts a Note, Important, Warning, or Tip. Select Alert from the menu, then select the alert type. If you have previously selected text, it will be surrounded with the selected alert syntax. If no text is selected, a new alert will be added with placeholder text. Numbered list Inserts a new numbered list. If multiple lines are selected, each will be a list item. Note that numbered lists show in the Markdown as all 1s, but will render on docs.luzfaltex.com as sequential numbers or, for nested lists, letters. To create a nested numbered list, tab from within the parent list. Bulleted list Inserts a new bulleted list. Table Inserts a Markdown table structure. After you select the table command, specify the number of columns and rows in the format columns:rows, such as 3:4. Note that the maximum number of columns you can specify via this extension is 5, which is the recommended maximum for readability. Link to file in repo Inserts a relative link to another file in the current repo. After selecting this option, type in the command window to filter files by name, then select the file you want. If you have previously selected text, it will become the link text. Otherwise, the H1 of the target file will be used as link text. Link to web page Inserts a link to a web page. After selecting this option, paste or type the URI into the command window. https:// is required. If you have previously selected text, it will become the link text. Otherwise, the URI will be used as link text. Link to heading Links to a bookmark in the current file or another file in the repo. Bookmark in this file : Choose from a list of headings in the current file to insert a properly formatted bookmark. Bookmark in another file : First, filter by file name and select the file to link to, then choose the appropriate heading within the selected file. Image Type alternate text (required for accessibility) and select it, then call this command to filter the list of supported image files in the repo and select the one you want. If you haven't selected alt text when you call this command, you will be prompted for it before you can select an image file. Include Find a file to embed in the current file. Snippet Find a code snippet in the repo to embed in the current file. Video Add an embedded video. Template Create a new file and apply a Markdown template. See Templates , below, for more information. How to assign keyboard shortcuts Type CTRL+K then CTRL+S to open the Keyboard Shortcuts list. Search for the command, such as formatBold , for which you want to create a custom keybinding. Click the plus that appears near the command name when you mouse over the line. After a new input box is visible, type the keyboard shortcut you want to bind to that particular command. For example, to use the common shortcut for bold, type ctrl+b . It's a good idea to insert a when clause into your keybinding, so it won't be available in files other than Markdown. To do this, open keybindings.json and insert the following line below the command name (be sure to add a comma between lines): \"when\": \"editorTextFocus && editorLangId == 'markdown'\" Your completed custom keybinding should look like this in keybindings.json: // Place your key bindings in this file to overwrite the defaults [ { \"key\": \"ctrl+b\", \"command\": \"formatBold\", \"when\": \"editorTextFocus && editorLangId == 'markdown'\" } ] Save keybindings.json. See Keybindings in the VS Code docs for more information. How to show the legacy toolbar Users of the pre-release version of the extension will notice that the authoring toolbar no longer appears at the bottom of the VS Code window when the Docs Markdown Extension is installed. This is because the toolbar took up a lot of space on the VS Code status bar and did not follow best practices for extension UX, so it is deprecated in the new extension. However, you can optionally show the toolbar by updating your VS Code settings.json file as follows: In VS Code, go to File -> Preferences -> Settings ( CTRL+Comma ). Select User Settings to change the settings for all VS Code workspaces, or Workspace Settings to change them for just the current workspace. In the Default Settings pane, find Docs Authoring Extension Configuration, and select the pencil icon next to the desired setting. Next, you will be prompted to select either true or false . Once you've made your selection, VS Code will automatically add the value to the settings.json file and you will be prompted to reload the window for the changes to take effect. How to use Docs templates The Docs Article Templates extension lets writers in VS Code pull a Markdown template from a centralized store and apply it to a file. Templates can help ensure that required metadata is included in articles, that content standards are followed, and so on. Templates are managed as Markdown files in a public GitHub repository. To apply a template in VS Code If you don't have the Docs Markdown extension installed, hit F1 to open the command palette, start typing \"template\" to filter, then click Docs: Template . If you do have Docs Markdown installed, you can use either the command palette or click Alt+M to bring up the Docs Markdown QuickPick menu, then select Template from the list. Select the desired template from the list that appears. To add your GitHub ID and/or LuzFaltex alias to your VS Code settings The Templates extension supports three dynamic metadata fields: author, ms.author, and ms.date. That means that if a template creator uses these fields in the metadata header of a Markdown template, they will be auto-populated in your file when you apply the template, as follows: Metadata Value author Your GitHub ID, if specified in your VS Code settings file. ms.author Your LuzFaltex alias, if specified in your VS Code settings file. If you are not a LuzFaltex employee, leave this unspecified. ms.date The current date in the Docs-supported format, MM/DD/YYYY. Note that the date is not automatically updated if you subsequently update the file - you must update this manually to indicate the article freshness date. To set author (GitHub ID) and/or ms.author (LuzFaltex alias) In VS Code, go to File -> Preferences -> Settings ( CTRL+Comma ). Select User Settings to change the settings for all VS Code workspaces, or Workspace Settings to change them for just the current workspace. In the Default Settings pane on the left, find Docs Article Templates Extension Configuration, click the pencil icon next to the desired setting, then click Replace in Settings. The User Settings pane will open side-by-side, with a new entry at the bottom. Add your GitHub ID or LuzFaltex email alias, as appropriate, and save the file. You might need to close and restart VS Code for the changes to take effect. Now, when you apply a template that uses dynamic fields, your GitHub ID and/or LuzFaltex alias will be auto-populated in the metadata header."
  },
  "contribute/index.html": {
    "href": "contribute/index.html",
    "title": "LuzFaltex Docs contributor guide overview | LuzFaltex Documentation",
    "keywords": "LuzFaltex Docs contributor guide overview Welcome to the docs.luzfaltex.com (Docs) Contributor Guide! Several of our documentation sets are open source, hosted on GitHub. This streamlines and improves communication between the product engineers, the content teams, and our customers. Working in the open provides several advantages: Open source repos plan in the open to get feedback on what docs are most needed. Open source repos review in the open to publish the most helpful content on our first release. Open source repos update in the open to make it easier to continuously improve the content. The user experience on docs.luzfaltex.com integrates GitHub workflows directly to make it even easier. Start by editing the document you are viewing . Or, help by reviewing new topics , or create quality issues . Important All repositories that publish to docs.luzfaltex.com have adopted the Microsoft Open Source Code of Conduct . For more information, see the Code of Conduct FAQ or contact opencode@microsoft.com with any questions or comments. Quick edits to existing documents Quick edits streamline the process to report and fix small errors and omissions in documents. Despite all efforts, small grammar and spelling errors do make their way into our published documents. While you can create issues to report mistakes, it's faster and easier to create a pull request (PR) to fix the issue. Almost every article displays an edit button as shown in the following figure. Clicking the Edit (or equivalent localized) button takes you to the source file on GitHub. Next, click the pencil icon, shown in the following figure to edit the article. Note If the pencil icon is grayed out, you need to login to your GitHub account, or create a new account. Make your changes in the web editor. You can click the Preview changes tab to check formatting of your change. Once you have made your changes, scroll to the bottom of the page. Enter a title and description for your PR and click Propose file change as shown in the following figure: Now that you've proposed your change, you need to ask the owners of the repository to \"pull\" your changes into their repository. This is done using something called a \"pull request\". When you clicked on Propose file change in the figure above, you should have been taken to a new page that looks like the following figure: Click Create pull request , enter a title (and optionally a description) for the pull request, and then click Create pull request again. That's it! Content team members will review and merge your PR. You may get some feedback requesting changes if you made larger changes. The GitHub editing UI responds to your permissions on the repository. The preceding images are accurate for contributors that do not have write permissions to the target repository. GitHub automatically creates a fork of the target repository in your account. If you have write access to the target repository, GitHub creates a new branch in the target repo. The branch name has the form <GitHubId>-patch-n using your GitHub ID, and a numeric identifier for the patch branch. We use PRs for all changes, even for contributors that have write access. Most repositories have the master branch protected so that updates must be submitted as PRs. The in-browser editing experience is best for minor or infrequent changes. If you make large contributions, or use advanced Git features (such as branch management or advanced merge conflict resolution), you need to fork the repo and work locally . Review open PRs You can read new topics before they are published by checking the currently open PRs. Reviews follow the GitHub flow process. You can see proposed updates or new articles in public repositories. Review them and add your comments. Look at any of our docs repositories, and check the open pull requests (PRs) for areas that interest you. Community feedback on proposed updates helps the entire community. Create quality issues Our docs are a continuous work in progress. Good issues help us focus our efforts on the highest priorities for the community. The more detail you can provide, the more helpful the issue. Tell us what information you sought. Tell us the search terms you used. If you can't get started, tell us how you want to start exploring unfamiliar technology. Issues start the conversation about what's needed. The content team will respond to these issues with ideas for what we can add, and ask for your opinions. When we create a draft, we'll ask you to review the PR . Get more involved Other topics help you get started productively contributing to LuzFaltex Docs. They explain working with GitHub repositories, Markdown tools, and extensions used in the LuzFaltex Docs platform. Code contributions If you wish to contribute code to our projects, please see our Code Contribution Guide ."
  },
  "contribute/how-to-write-workflows-major.html": {
    "href": "contribute/how-to-write-workflows-major.html",
    "title": "GitHub contribution workflow for major or long-running changes | LuzFaltex Documentation",
    "keywords": "GitHub contribution workflow for major or long-running changes Important All repositories that publish to docs.luzfaltex.com have adopted either the Microsoft Open Source Code of Conduct . For more information, see the Code of Conduct FAQ or contact opencode@microsoft.com with any questions or comments. Overview This workflow is suitable for a contributor who needs to make a major change or will be a frequent contributor to a repository. Frequent contributors typically have ongoing (long-running) changes, which go through multiple build/validation/staging cycles or span multiple days before pull request sign-off and merge. Examples of these types of contributions include: Making a large contribution . For instance, you might make contributions (additions, changes, or deletions) that span multiple articles and need to be committed and tested as one unit of work in a single pull request. Creating and publishing a new article , which typically requires a more robust local editor. Adding new images or updating images , which typically requires simultaneous creation of a new media subdirectory, image files, updates to image links in articles, and previewing markdown files in a local editor to test image rendering. Updating an article over a period of days before you publish . In these cases, you typically need to do regular integration of other changes that occur in the master branch. This integration is easier via Git Bash and local editing. You also run the risk of losing your edits if you do this via the GitHub UI and wait before you commit the changes. Making continual updates to the same article after a pull request has been opened (unless you are comfortable doing this via the GitHub UI). Using the GitHub UI has the potential to create multiple outstanding pull requests for the same file, which may conflict with one another. Terminology Before you start, let's review some of the Git/GitHub terms and monikers used in this workflow. Don't worry about understanding them now. Just know that you will be learning about them, and you can refer back to this section when you need to verify a definition. Name Description fork Normally used as a noun, when referring to a copy of a main GitHub repository. In practice, a fork is just another repository. But it's special in the sense that GitHub maintains a connection back to the main/parent repository. It's sometimes used as a verb, as in \"You must fork the repository first.\" remote A named connection to a remote repository, such as the \"origin\" or \"upstream\" remote. Git refers to these as remotes because they are used to reference a repository that's hosted on another computer. In this workflow, a remote is always a GitHub repository. origin The name assigned to the connection between your local repository and the repository from which it was cloned. In this workflow, origin represents the connection to your fork. It's sometimes used as a moniker for the origin repository itself, as in \"Remember to push your changes to origin.\" upstream Like the origin remote, upstream is a named connection to another repository. In this workflow, upstream represents the connection between your local repository and the main repository, from which your fork was created. It's sometimes used as a moniker for the upstream repository itself, as in \"Remember to pull the changes from upstream.\" Workflow Important If you haven't already, you must complete the steps in the Setup section. This section walks you through setting up your GitHub account, installing Git Bash and a Markdown editor, creating a fork, and setting up your local repository. If you are unfamiliar with Git and GitHub concepts such as a repository or branch, please first review Git and GitHub fundamentals . In this workflow, changes flow in a repetitive cycle. Starting from your device's local repository, they flow back up to your GitHub fork, into the main GitHub repository, and back down locally again as you incorporate changes from other contributors. Use GitHub flow Recall from Git and GitHub fundamentals that a Git repository contains a master branch, plus any additional work-in-progress branches that have not been integrated into master. Whenever you introduce a set of logically related changes, it’s a best practice to create a working branch to manage your changes through the workflow. We refer to it here as a working branch because it's a workspace to iterate/refine changes, until they can be integrated back into the master branch. Isolating related changes to a specific branch allows you to control and introduce those changes independently, targeting them to a specific release time in the publishing cycle. In reality, depending on the type of work you do, you can easily end up with several working branches in your repository. It's not uncommon to be working on multiple branches at the same time, each representing a different project. Tip Making your changes in the master branch is not a good practice. Imagine that you use the master branch to introduce a set of changes for a timed feature release. You finish the changes and are waiting to release them. Then in the interim, you have an urgent request to fix something, so you make the change to a file in the master branch and then publish the change. In this example, you inadvertently publish both the fix and the changes that you were holding for release on a specific date. Now let's create a new working branch in your local repository, to capture your proposed changes. Each git client is different, so consult the help for your preferred client. You can see an overview of the process in the GitHub Guide on GitHub flow . Pull request processing The previous section walked you through the process of submitting proposed changes, by bundling them in a new pull request (PR) that is added to the destination repository's PR queue. A pull request enables GitHub's collaboration model, by asking for the changes from your working branch to be pulled and merged into another branch. In most cases, that other branch is the default/master branch in the main repository. Validation Before your pull request can be merged into its destination branch, it might be required to pass through one or more PR validation processes. Validation processes can vary depending on the scope of proposed changes and the rules of the destination repository. After your pull request is submitted, you can expect one or more of the following to happen: Mergeability : A baseline GitHub mergeability test occurs first, to verify whether the proposed changes in your branch are in conflict with the destination branch. If the pull request indicates that this test failed, you must reconcile the content that is causing the merge conflict before processing can continue. CLA : If you are contributing to a public repository and are not a Microsoft employee, depending on the magnitude of the proposed changes, you might be asked to complete a short Contribution License Agreement (CLA) the first time you submit a pull request to that repository. After the CLA step is cleared, your pull request is processed. Labeling : Labels are automatically applied to your pull request, to indicate the state of your pull request as it passes through the validation workflow. For instance, new pull requests might automatically receive the \"do-not-merge\" label, indicating that the pull request has not yet completed the validation, review, and sign-off steps. Validation and build : Automated checks verify whether your changes pass validation tests. The validation tests might yield warnings or errors, requiring you to make changes to one or more files in your pull request before it can be merged. The validation test results are added as a comment in your pull request for your review, and they might be sent to you in e-mail. Staging : The article pages affected by your changes are automatically deployed to a staging environment for review upon successful validation and build. Preview URLs appear in a PR comment. Auto-merge : The pull request might be automatically merged, if it passes validation testing and certain criteria. In this case, you don't need to take any further action. Review and sign-off After all PR processing is completed, you should review the results (PR comments, preview URLs, etc.) to determine if additional changes to its files are required before you sign off for merging. If a PR reviewer has reviewed your pull request, they can also provide feedback via comments if there are outstanding issues/questions to be resolved prior to merge. Comment automation enables read-level users (users who don't have write permissions in a repo) to perform a write-level action, by assigning the appropriate label to a pull request. If you are working in a repository where comment automation has been implemented, use the hashtag comments listed in the following table to assign labels, change labels, or close a pull request. Microsoft employees will also be notified via e-mail for review and sign-off of public repository PRs, whenever changes are proposed to articles for which you are the author. Hashtag comment What it does Repo availability #sign-off When the author of an article types the #sign-off comment in the comment stream, the ready-to-merge label is assigned. This label lets the reviewers in the repo know when a pull request is ready for review/merge. Public and private #sign-off If a contributor who is not the listed author tries to sign off on a public pull request by using the #sign-off comment, a message is written to the pull request indicating that only the author can assign the label. Public #hold-off Authors can type #hold-off in a PR comment to remove the ready-to-merge label--in case they change their mind or make a mistake. In the private repo, this assigns the do-not-merge label. Public and private #please-close Authors can type #please-close in the comment stream to close the pull request if they decide not to have the changes merged. Public When the pull request is issue-free and signed off, your changes are merged back into the parent branch and the pull request is closed. Publishing Remember, your pull request has to be merged by a PR reviewer before the changes can be included in the next scheduled publishing run. Pull requests are normally reviewed/merged in the order of submission. If your pull request requires merging for a specific publishing run, you will need to work with your PR reviewer ahead of time to ensure that merging happens prior to publishing. After your contributions are approved and merged, the docs.microsoft.com publishing process picks them up. Depending on the team that manages the repository you are contributing to, publishing times can vary. Articles published under the following paths are normally deployed at approximately 10:30 AM and 3:30 PM Pacific Time, Monday-Friday: https://docs.microsoft.com/azure/ https://docs.microsoft.com/aspnet/ https://docs.microsoft.com/dotnet/ https://docs.microsoft.com/enterprise-mobility-security It can take up to 45 minutes for articles to appear online after publishing. After your article is published, you can verify your changes at the appropriate URL: https://docs.microsoft.com/<path-to-your-article-without-the-md-extension> . Next steps That's it! You've made a contribution to docs.luzfaltex.com content! To learn more about topics such as Markdown and Markdown extensions syntax, continue to the \"Writing essentials\" section."
  },
  "contribute/git-github-fundamentals.html": {
    "href": "contribute/git-github-fundamentals.html",
    "title": "Git and GitHub essentials for Documentation | LuzFaltex Documentation",
    "keywords": "Git and GitHub essentials for Docs Overview As a contributor to Docs content, you will interact with multiple tools and processes. You'll work in parallel with other contributors on the same project, potentially the exact same content, even at the same time. This is all enabled through Git and GitHub software. Git is an open-source version control system. It facilitates this type of project collaboration through distributed version control of files that live in repositories . In essence, Git makes it possible to integrate streams of work done by multiple contributors over time, for a given repository. GitHub is a web-based hosting service for Git repositories, such as those used to store docs.luzfaltex.com content. For any project, GitHub hosts the main repository, from which contributors can make copies for their own work. Git If you're familiar with centralized version control systems (such as Team Foundation Server, SharePoint, or Visual SourceSafe), you will notice that Git has a unique contribution workflow and terminology to support its distributed model. For instance, there is no file locking that is normally associated with check-out/check-in operations. As a matter of fact, Git is concerned about changes at an even finer level, comparing files byte by byte. Git also uses a tiered structure to store and manage content for a project: Repository : Also known as a repo , this is the highest unit of storage. A repository contains one or more branches. Branch : A unit of storage that contains the files and folders that make up a project's content set. Branches separate streams of work (typically referred to as versions). Contributions are always made and scoped to a specific branch. All repositories contain a default branch (typically named \"master\") and one or more branches that are destined to be merged back into the master branch. The master branch serves as the current version and \"single source of truth\" for the project. It's the parent from which all other branches in the repository are created. Contributors interact with Git to update and manipulate repositories at both the local and GitHub levels: Locally through tools such as the Git Bash console, which supports Git commands for managing local repositories and communicating with GitHub repositories Via www.github.com , which integrates Git to manage the reconciliation of contributions that flow back into the main repository GitHub Note Although Docs guidance is based on using GitHub, some teams use Visual Studio Team Services to host Git repositories. The Visual Studio Team Explorer client provides a GUI for interacting with Team Services repositories, as an alternative to using Git commands through a command line. Also, many of the following guidelines were developed as best practices from years of experience in hosting Azure service content in GitHub. They might be required in some Docs repositories. All workflows begin and end at the GitHub level, where the main repository for any Docs project is stored. The copies that contributors create for their own use are distributed across multiple computers. These copies are eventually reconciled back into the project's main GitHub repository. Directory organization As mentioned earlier, a project's default/master branch serves as the current version of content for the project. The content in the master branch--and branches created from it--is loosely aligned with the organization of the articles on the corresponding Docs pages. Subdirectories are used for separation of like content (such as services), media content (such as image files), and \"include\" files (which enable reuse of content). Within the root of this directory, you can find general articles that relate to the overall service or product. And typically, you can then find another series of subdirectories that match the features/services or common scenarios. Media subdirectory Each article directory contains a /media subdirectory for corresponding media files. Media files contain images used by articles that have image references. Includes subdirectory Whenever we have reusable content that is shared across two or more articles, it is placed in an /includes subdirectory off the main articles directory. In a Markdown file that uses the include file, a corresponding \"include\" Markdown extension is placed in the location where the include file needs to be referenced. See How to use Markdown: Includes for additional guidance. Markdown file template For convenience, the root directory of each repository typically contains a Markdown template file named template.md . You can use this template file as a \"starter file\" if you need to create a new article for submission to the repository. The file contains: A metadata header at the top of the file, delineated by two, 3-hyphen lines. It contains the various tags used for tracking information related to the article. Article metadata enables certain functionality, such as author attribution, contributor attribution, breadcrumbs, and article descriptions. It also includes SEO optimizations and reporting processes that LuzFaltex uses to evaluate the performance of the content. So the metadata is important! A metadata section that describes the various metadata tags and values. If you're unsure of the values to use for the metadata section, you can leave them blank or comment them with a leading hashtag (#), and they will be reviewed/completed by the pull request reviewer for the repository. Various examples of using Markdown to format the elements of an article. General instructions on the use of Markdown extensions , which you can use for various types of alerts. Examples of embedding video by using an iframe. General instructions on the use of docs.luzfaltex.com extensions , which you can use for special controls such as buttons and selectors. Pull requests A pull request provides a convenient way for a contributor to propose a set of changes that will be applied to the default branch. The changes (also known as commits ) are stored in a contributor's branch, so GitHub can first model the impact of merging them into the default branch. A pull request also serves as a mechanism to provide the contributor with feedback from a build/validation process, the pull request reviewer, to resolve potential issues or questions before the changes are merged into the default branch. There are two ways to contribute by pull request, depending on the size of changes that you want to propose. We will cover this in detail later, in the GitHub workflow section of this guide."
  },
  "contribute/get-started-setup-local.html": {
    "href": "contribute/get-started-setup-local.html",
    "title": "Set up Git repository locally | LuzFaltex Documentation",
    "keywords": "Set up Git repository locally for documentation This article describes the steps to set up a git repository on your local machine, with the intent to contribute to LuzFaltex documentation. Contributors may use a locally cloned repository to add new articles, do major edits on existing articles, or change artwork. You run these one-time setup activities to get started contributing: Determine the appropriate repository Fork the repository to your GitHub account Choose a local folder for the cloned files Clone the repository to your local machine Configure the upstream remote value Important If you're making only minor changes to an article, you do not need to complete the steps in this article. You can continue directly to the quick changes workflow . Overview To contribute to LuzFaltex's documentation site, you can make and edit Markdown files locally by cloning the corresponding documentation repository. LuzFaltex requires you to fork the appropriate repository into your own github account, so that you have read/write permissions there to store your proposed changes. Then you use pull requests to merge changes into the read-only central shared repository. If you're new to GitHub, watch the following video from Microsoft for a conceptual overview of the forking and cloning process: Fork the repository Using the appropriate repository, create a fork of the repository into your own GitHub account by using the GitHub website. A personal fork is required since all main documentation repositories provide read-only access. To make changes, you must submit a pull request from your fork into the main repository. To facilitate this process, you first need your own copy of the repository, in which you have write access. A GitHub fork serves that purpose. Go to the main repository's GitHub page and click the Fork button on the upper right. If you are prompted, select your GitHub account tile as the destination where the fork should be created. This prompt creates a copy of the repository within your GitHub account, known as a fork. Choose a local folder Make a local folder to hold a copy of the repository locally. Some of the repositories can be large; up to 5 GB for azure-docs for example. Choose a location with available disk space. Choose a folder name should be easy for you to remember and type. For example, consider a root folder C:\\docs\\ or make a folder in your user profile directory ~/Documents/docs/ Important Avoid choosing a local folder path that is nested inside of another git repository folder location. While it is acceptable to store the git cloned folders adjacent to each other, nesting git folders inside one another causes errors for the file tracking. Launch Git Bash The default location that Git Bash starts in is typically the home directory (~) or /c/users/<Windows-user-account>/ on Windows OS. To determine the current directory, type pwd at the $ prompt. Change directory (cd) into the folder that you created for hosting the repository locally. Note that Git Bash uses the Linux convention of forward-slashes instead of back-slashes for folder paths. For example, cd /c/docs/ or cd ~/Documents/docs/ Create a local clone Using Git Bash, prepare to run the clone command to pull a copy of a repository (your fork) down to your device on the current directory. Authenticate by using Git Credential Manager If you installed the latest version of Git for Windows and accepted the default installation, Git Credential Manager is enabled by default. Git Credential Manager makes authentication much easier, because you don't need to recall your personal access token when re-establishing authenticated connections and remotes with GitHub. Run the clone command, by providing the repository name. Cloning downloads (clone) the forked repository on your local computer. Tip You can get your fork's GitHub URL for the clone command from the Clone or download button in the GitHub UI: Be sure to specify the path to your fork during the cloning process, not the main repository from which you created the fork. Otherwise, you cannot contribute changes. Your fork is referenced through your personal GitHub user account, such as github.com/<github-username>/<repo> . git clone https://github.com/<github-username>/<repo>.git Your clone command should look similar to this example: git clone https://github.com/smithj/azure-docs.git When you're prompted, enter your GitHub credentials. When you're prompted, enter your two-factor authentication code. Note Your credentials will be saved and used to authenticate future GitHub requests. You only need to do this authentication once per computer. The clone command runs and downloads a copy of the repository files from your fork into a new folder on the local disk. A new folder is made within the current folder. It may take a few minutes, depending on the repository size. You can explore the folder to see the structure once it is finished. Configure remote upstream After cloning the repository, set up a read-only remote connection to the main repository named upstream . You use the upstream URL to keep your local repository in sync with the latest changes made by others. The git remote command is used to set the configuration value. You use the fetch command to refresh the branch info from the upstream repository. If you're using Git Credential Manager , use the following commands. Replace the <repo> and <organization> placeholders. cd <repo> git remote add upstream https://github.com/<organization>/<repo>.git git fetch upstream View the configured values and confirm the URLs are correct. Ensure the origin URLs point to your personal fork. Ensure the upstream URLs point to the main repository, such as LuzFaltexDocs or Azure. git remote -v Example remote output is shown. A fictitious git account named MyGitAccount is configured with a personal access token to access the repo azure-docs: origin https://github.com/MyGitAccount/azure-docs.git (fetch) origin https://github.com/MyGitAccount/azure-docs.git(push) upstream https://github.com/LuzFaltexDocs/azure-docs.git (fetch) upstream https://github.com/LuzFaltexDocs/azure-docs.git (push) If you made a mistake, you can remove the remote value. To remove the upstream value, run the command git remote remove upstream . Next steps To learn more about adding and updating content, continue to the GitHub contribution workflow ."
  },
  "index.html": {
    "href": "index.html",
    "title": "LuzFaltex Docs | LuzFaltex Documentation",
    "keywords": "Welcome to LuzFaltex Docs Important While these pages are considered \"always under construction\", it is important to note that we are currently busy getting the initial documentation, site feel, branding, and other items up and running. Please be patient while this is happening. Though if you'd like to help out, take a look at our Contributing Guide . LuzFaltex has furnished this documentation site to hold information on its projects, legal policies, and operational procedures. We post both internal and external documentation on this site in order to improve transparency, promote discussion, and enable contribution to improve these documents. Contributions provided by you are licensed to us under the CC-BY-SA-4.0 license, which enables us to use your contributions free of charge, under the condition that we provide attribution. Please read the Contributing Guide for more information on how this is done."
  },
  "contribute/get-started-setup-tools.html": {
    "href": "contribute/get-started-setup-tools.html",
    "title": "Install content authoring tools | LuzFaltex Documentation",
    "keywords": "Install content authoring tools This article describes the steps to interactively install Git client tools and Visual Studio Code. Install Git Install Visual Studio Code Install Docs Authoring Pack Important If you're making only minor changes to an article, you do not need to complete the steps in this article and can continue directly to the quick changes workflow . Major contributors are encouraged to complete these steps, which enable you to use the major/long-running changes workflow . Even if you have write permissions in the main repository, we highly recommend (and this guide assumes) that you fork and clone the repository , so that you have read/write permissions to store your proposed changes in your fork. Install Git client tools Install the latest version of Software Freedom Conservancy's Git client tools for your platform. Git for Windows . This install includes the Git version control system and Git Bash, the command-line app that you use to interact with your local Git repository. Git for Mac is provided as part of the Xcode Command Line Tools. Simply run git from the command line. You will be prompted to install the command line tools if needed. You can also download Git for Mac from the Software Freedom Conservancy. Git for Linux and Unix If you prefer a graphical user interface (GUI) over a command-line interface (CLI), see Software Freedom Conservancy's available GUI Clients page , GitHub's GitHub Desktop , or Visual Studio Code for some popular options. Follow the instructions for your chosen client for installation and configuration. In the next article, you will Set up a local Git repository . Additional Git resources are available here: Git terminology | Git basics | Learning Git and GitHub Understand Markdown editors Markdown is a lightweight markup language that is both easy to read and easy to learn. Therefore, it has rapidly become an industry standard. To write articles in Markdown, we recommend that you first download and install a Markdown editor. Visual Studio Code is the preferred tool for editing Markdown at LuzFaltex. Atom is another popular tool for editing Markdown. Markdown text is saved into files with .md extension. Additional details on how to write with Markdown, including Markdown basics and the features supported by OPS custom Markdown extensions, are covered later in the How to use Markdown article. Visual Studio Code Visual Studio Code , also known as VS Code, is a lightweight editor that works on Windows, Linux, and Mac. It includes git integration, and support for extensions. Download and install VS Code . The VS Code home page should detect your operating system correctly. Windows Mac Linux Tip To launch VS Code and open the current folder, run the command code . in the command line or bash shell. If the current folder is part of a local git repo, the github integration appears in Visual Studio Code automatically. Docs Authoring Pack Install the Docs Authoring Pack for Visual Studio Code. This set of extensions includes basic authoring assistance for help when writing Markdown, and a preview feature, so that you can see what the Markdown looks like in the style of the docs.microsoft.com site. Visit this marketplace page and select Install , or search for docsmsft.docs-authoring-pack in your extensions list in the VS Code window. The Docs Authoring Pack is accessible by pressing Alt+M inside of VS Code. The toolbar is hidden by default but can be shown. Edit the VS Code settings (Control+comma) and adding user setting \"markdown.showToolbar\": true to show the toolbar. For more information, see the Docs Authoring Pack page. Next steps Now you are ready to Set up a local Git repository ."
  },
  "contribute/get-started-setup-github.html": {
    "href": "contribute/get-started-setup-github.html",
    "title": "GitHub account setup steps | LuzFaltex Documentation",
    "keywords": "GitHub account setup Set up your GitHub account To contribute to Docs technical content, you need to set up your own GitHub account. The good news is, you have to do most steps only one time. 1. Create a GitHub account and set up your profile If you don't already have a GitHub account, create one . Identify any affiliations in your GitHub profile. Note LuzFaltex employees participating in Open Source projects always identify themselves as such their in GitHub profiles. Community contributors should ensure that their profile does not incorrectly imply an employment relationship. Next steps Continue to the Tool installations article to install Git Bash, a Markdown editor, and more."
  },
  "contribute/additional-resources.html": {
    "href": "contribute/additional-resources.html",
    "title": "Additional Git and Github resources | LuzFaltex Documentation",
    "keywords": "Additional Git and Github resources If you are unfamiliar with Git or GitHub, these resources can help you learn, be productive, or answer questions. Git source control resources Git basics : This has a basic overview of how git works. Pro Git e-book (web) : This is a thorough git reference, in HTML format. Pro Git e-book (PDF) : Same as the preceding link, in PDF form. Learn Git course from Codecademy : Git tutorial from Codeacademy. Try Git course from Code School : Git tutorial from Code School GitHub resources 15-minute interactive primer : This is an online git tutorial. It exposes you to the basics of git. Cheat sheets : A quick reference to common GitHub commands and workflows. GitHub Guides : The home of GitHub documentation. GitHub learning resources : Other useful GitHub resources. GitHub training services : A listing of tutorials and training offerings from GitHub. Glossary : A handy glossary of git and GitHub terms."
  },
  "legal/tacos-policy.html": {
    "href": "legal/tacos-policy.html",
    "title": "Terms and Conditions of Service | LuzFaltex Documentation",
    "keywords": "Terms and Conditions of Service Preamble The following Terms and Conditions of Service (\"TACOS\") govern all use of the LuzFaltex.com website and all content, services, and products provided by LuzFaltex (taken together, the \"Projects\"). The Projects are offered subject to your acceptance without modification all of the TACOS contained herein and all other operating rules, policies (including, without limitation, the LuzFaltex Privacy Policy , the LuzFaltex Code of Conduct , and the LuzFaltex Security Vulnerability Reporting Policy ) and all procedures that may be published from time to time on this site or any project site (collectively, the \"Agreements\"). The Agreements comprise the entire agreement between you and us relating to Content and your use of the Projects and supersedes any prior or inconsistent agreements. In the event that any part of this agreement is declared unenforceable or invalid, the remainder will continue to be valid and enforceable. Links to these agreements will be available at the bottom of all pages. Please read these Agreements carefully before accessing or using the Website. An easy-read version has been provided in the TACOS Overview though the overview is not a replacement for the complete TACOS. By accessing or using any part of the Projects and/or uploading or attempting to upload any Content (as defined in Definitions ), you agree to become bound by the Agreements hereafter perpetually and indefinitely, regardless of whether you continue to remain a registered user or not, unless and until terminated, in whole or in part, by LuzFaltex on notice to you. If you do not agree to all the terms and conditions of this agreement, then you may not access any of the Projects. If these TACOS are considered an offer by LuzFaltex, acceptance is expressly limited to these terms. The Projects are available only to individuals who are at least 13 years old, or if younger than 13, with the appropriate permission and consents from your parent or legal guardian. We may change these TACOS or make new TACOS at any time. Although we will attempt to notify you through reasonable means when the TACOS change, we are under no obligation to do so. The newest TACOS will always be available at our documentation pages under Terms and Conditions of Service . A history of all of the changes made to these TACOS will be available on GitHub . Definitions The term \"Content\" means and refers to any and all content, media, and materials you submit to the Projects, including, without limitation, still photographs, writings, spoken statements, music, audio, video, video recordings, audio-visual works and recordings, slides, portraits, animated and/or motion pictures, caricatures, likenesses, vocal or other sounds, sound recordings, voices, voice reproductions, computer graphics and visual effects, as well as any accompanying documentation, packaging or other materials, tangible or intangible, and to all derivative works, translations, adaptations or variations of same, regardless of tangible medium, broadcast medium, format or form, now known or hereinafter developed or discovered, and regardless of where produced, on location, in a studio, or elsewhere, in black-and-white or in color, alone or in conjunction with other work, characters, real or imaginary, in any part of the world. The term \"Moderator\" means and refers to any member of LuzFaltex staff, or an appointed agent thereof, who is responsible for enforcing these Agreements. Content might contain adult language, descriptions of graphic violence, implied sexual situations, and content inappropriate for minors. On occasion, content that violates these TACOS such as (but not limited to) sexually explicit descriptions and inflammatory comments or bullying behavior may also be found. LuzFaltex makes no guarantee that any Content is appropriate for any audience , and while we will do our best to enforce the rules and guidelines set out in these TACOS, it may take us a reasonable amount of time to identify and hide, delete, or disable access to Content that violates the TACOS. Content does not reflect the views of LuzFaltex, and we do not represent or guarantee the truthfulness, accuracy, or reliability of any Content, nor does LuzFaltex endorse or support any opinions expressed in any Content. In no event shall LuzFaltex have or be construed to have any responsibility or liability for, or in connection with, any Content. See the User Content Standards section below for more information. Disciplinary Action may refer to: restriction of access (\"banishment,\" \"banning,\" \"ban\") to any or all Projects, either on a permanent or temporary basis. \"Kicking\" refers to the abortion of the active connection of the user to a Project without restricting access. \"Muting\" refers to the denial of a user's request to post comments on a temporary basis. Verbal (or text-based) warnings The severity of Disciplinary Action shall be determined by the Moderator reviewing the case and shall be based on the severity of the action and previous infractions. For more information, see the LuzFaltex Code of Conduct . User Conduct Clause In order to ensure the safety of all of our members, we require users to respect the following conditions: Do not impersonate members of LuzFaltex staff. Do not share login information to any LuzFaltex-owned product (account). You will be held accountable for any actions using your account, account name, or your likeness, regardless of who was using it and regardless of authorization. In the event of a loss of control of any account, you must inform members of staff immediately through any available means, including but not limited to Discord, email, or any other available and known means of communication, provided that it is electronic and may be reasonably expected to be received in a timely manner. User Content Standards You area solely responsible and liable for your communications and Content (and the consequences thereof) made under your name, username, email address, password, and your registration and profile information, if any. Content does not reflect the views of LuzFaltex, and we do not represent or guarantee the truthfulness, accuracy, or reliability of any Content, or endorse or support any opinions expressed in any Content. In no event shall LuzFaltex have or be construed to have any responsibility for or in connection with any Content. If we determine, in our sole discretion, you or any Content you submit violates these TACOS, we reserve the right, at any time, without notice and without limiting any of the other rights we may have under these agreements, at law or in equity, to: refuse to allow you to submit further Content; remove and delete your Content; revoke your registration and right to use the Projects; and use any technological, legal, operational, or other means available to enforce the terms of these TACOS, including, without limitation, blocking specific IP addresses or deactivating your registration, access using your e-mail address, your username, and password. We make no claim that any Content is appropriate for any purpose or audience. Our Projects may be accessed, used, or downloaded outside of the United States, which may not be legal for certain persons or in certain countries and you do so at your own risk. You are responsible for compliance with the laws of your jurisdiction. The United States controls the export of products and information and you agree to comply with such regulations and not to export or re-export any Content to countries or persons prohibited under export laws and regulations. You agree you will not submit, or attempt to submit, and we have the right to reject, refuse to accept, remove, or otherwise handle as LuzFaltex deeps appropriate, any \"Unauthorized Content\" which is defined as any Content that is or could be construed as having violated any of these TACOS, including, without limitation, Content which: infringes on a third party's copyright or other intellectual property rights; causes harm, harasses anyone, or which may prevent, prohibit, inhibit, restrict, or otherwise impair others from using or enjoying the Projects; permits or enables unauthorized access to the Projects or information of other users, except as defined in the LuzFaltex Security Vulnerability Reporting Policy ; permits or enables the modification, impairment, disruption, alteration, or interference with the use, features, functions, operations, or maintenance of the Projects; or violates any requirement, rules, terms, or conditions that may be applicable to the Projects. LuzFaltex does not control any Content submitted, and reserves the right to review any submitted Content and to delete, remove, edit, or reject Content that we deem, in our sole discretion, abusive, defamatory, obscene, pornographic, in violation of copyright, trademark, or other intellectual property rights, to be in violation of these TACOS, or to be unacceptable to LuzFaltex for any reason or no reason whatsoever; provided, however, that LuzFaltex shall have no obligation or liability to you for failure to do so or for doing so in any particular manner. If LuzFaltex receives notice of any claim of infringement that satisfies legal requirements, such as notice and takedown requirements under U.S. Copyright Law (see Copyright Infringement below), we may remove Content associated with such claim. LuzFaltex reserves the right to provide information to law enforcement officials, government agencies, and pursuant to judicial or regulatory compulsion, to protect their respective interests, the Projects, or to comply with legal, regulatory, audit, and compliance regulations. Ownership Except for the licenses, authorizations, consents, and rights granted hereunder and described in these TACOS, as comprehensive and broad as they may seem or actually be, LuzFaltex acquires no title or ownership rights in or to any Content you submit and nothing in these TACOS conveys to us any ownership rights in your Content. LuzFaltex is acting only as a host, bulletin board, or conduit for submitted Content, with which all of the specific rights granted by you hereunder. Although by your submission of any Content you are requesting and directing us to take advantage of and exploit all of the rights and privileges granted hereunder (including, without limitation, the right to display and post the Content on the Website and Server), we have no obligation to do any of these things. You must own the rights to the Content you submit or the right to grant all of the authorizations, permissions, approvals, consents, rights, and licenses as described in these TACOS. If you do not exclusively own all of these rights, you must have the necessary authorizations, permissions, approvals, consents, rights, and licenses from the owner(s) to enter into these TACOS and perform and comply with all of its obligations. In connection with all Content you submit on the Website and Server, you grant LuzFaltex the unqualified, unrestricted, unconditional, unlimited, worldwide, irrevocable, perpetual, and royalty free right, license, authorization, and permission, in any form or format, on or through any media or medium, and with any technology or devices now known or hereafter developed or discovered, in whole or part, to host, cache, store, maintain, use, reproduce, distribute, display, exhibit, perform, publish, broadcast, transmit, modify, prepare derivative works of, adapt, reformat, translate, and otherwise exploit all or any portion of your Content on the Website or Server (regardless of the Device through which the Website or Server may be accessed) and any other channels, services, or other distribution platforms, whether currently existing or developed in the future, of LuzFaltex, for any purpose whatsoever (including, without limitation, for any promotional purposes) without accounting, informing, credit or other obligation to you, and the right to license, sublicense, and authorize others to exercise any of the rights granted hereunder to LuzFaltex, in our sole discretion. For the avoidance of doubt, without limiting the generality of the rights granted to LuzFaltex, these rights include, without limitation, the right to distribute and synchronize all or any portion of your Content in timed relation to any other visual elements; to web cast, pod cast, re-publish, re-broadcast, re-platform, port, syndicate, route, and link to and from all or any portion of your Content; to encrypt, encode and decode, and compress and decompress all or any portion of your Content; to edit, mix, combine, merge, distort, superimpose, create or add special effects, illusions and/or other material to or of all or any portion of your Content; to create composite, stunt, comic or unusual photographs, videos, animations, motion pictures and/or voice reproductions from all or a portion of your Content; and to excerpt and/or extract portions of your Content in order to host, store, index, categorize and display your Content on or through the Platforms. Notwithstanding the foregoing TACOS, you acknowledge and agree that LuzFaltex shall not be required or have any obligation to host, index, display, accept, or use any submitted Content (or take advantage of any or all of the particular rights and authorities granted or otherwise available) and LuzFaltex may, in its sole discretion, remove or refused to host, index, display, accept, use, or do anything at all with respect to any Content. Once you submit or attempt to submit Content, or access the Website, you have no right to prohibit, restrict, revoke, or terminate any of the rights granted to LuzFaltex. You are not entitled to and you will not receive any compensation for your submission. You hereby release LuzFaltex of any and all claims of any rights, encumbrances, liens, claims, demands, actions, or suits which you may or can have in connection with your Content, including, without limitation, any and all liability for any use or non-use of your Content, claims for defamation, libel, slander, invasion of privacy, right of publicity, emotional distress, or economic loss. Copyright If you are a copyright owner or agent thereof and believe that any Content infringes upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (\"DMCA\") by providing our Copyright Agent with the following information in writing (see 17 U.S.C. 512(c)(3) for further detail): A physical or electronic signature of the owner or person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; Identification of the copyrighted work claimed to have been infringed, or if multiple copyrighted works are covered by a single notification, a representative list of such works; Identification of the Content that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled and information reasonably sufficient to permit LuzFaltex to locate the material; Information reasonably sufficient to permit LuzFaltex to contact you, such as an address, telephone number, and, if available, an electronic mail; A statement that you have good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent, or the law; and A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. You may direct copyright infringement claims to our DMCA Agent at copyright@luzfaltex.com . For clarity, only DMCA notices should go to the Copyright Agent; any other feedback, comments, requests for technical support, and other communications should be directed to a Moderator. You acknowledge that if you fail to comply with all of the requirements of this Section, your DMCA notice may not be valid. Upon receipt of a copyright infringement notification, LuzFaltex will inform the user who submitted the Content identified within the notification and remove or disable access to the allegedly infringed Content. For avoidance of doubt, the user who submitted the Content assumes all responsibility for any alleged infringement (see the Ownership section). If you believe that your Content that was removed (or to which access was disabled) is not infringing, or that you have the authorization from the copyright owner, the copyright owner's agent, or pursuant to the law, to post and use the material in your Content, you may send a counter-notice containing the following information to the Copyright Agent: Your physical or electronic signature; Identification of the Content that has been removed or to which access has been disabled and the location at which the user content appeared before it was removed or disabled; A statement that you have a good faith belief that the Content was removed or disabled as a result of mistake or a misidentification of the Content; and Your name, address, telephone number, and email address, a statement that you consent to the jurisdiction of the federal court in Kansas City, Kansas, and a statement that you will accept service of process from the person who provided the notification of the alleged infringement. If a counter-notice is received by the Copyright Agent, LuzFaltex may send a copy of the counter-notice to the original complaining party informing that person that it may replace the removed Content or cease disabling it in 10 business days. Unless the copyright owner files an action seeking a court order against the Content provider, member, or user, the removed content may be replaced, or access to it restored, in 10 to 14 business days or more after receipt of the counter-notice, at LuzFaltex's sole discretion. Final Clause You represent, warrant, and covenant to LuzFaltex, and by using the Website and server and/or submitting Content, you reaffirm each such representation, warranty and covenant, that: You are not a minor and you have the legal right and capability to enter into these TACOS and perform and comply with all of its terms and conditions, or if you are a minor, your parent or legal guardian has agreed to these TACOS on your behalf; All of the information provided by you associated with your Content is correct, complete, and current; Your submission of any Content does not violate these TACOS, any rights of any other party, any of your obligations, any law or regulations, or infringes upon or misappropriates any intellectual property, privacy, publicity, or other rights of any party; and You hold and will continue to hold all of the ownership, license, proprietary and other rights necessary to enter into, authorize, grant rights, and perform your obligations under these TACOS as described. Upon the request of LuzFaltex, you will furnish LuzFaltex any documentation, substantiation, and releases necessary and reasonably required to verify and substantiate your compliance with any or all of the TACOS, including, without limitation, the foregoing representations, warranties, and covenants. You represent and warrant that the submission of your Content is not subject to or under the jurisdiction of any guild or union collective bargaining agreement, and you further acknowledge that LuzFaltex is not signatory to any such agreement. Notwithstanding anything to the contrary, you also understand and agree that LuzFaltex shall not be obligated or responsible for providing any guild or residual payments in connection with the submission and exploitation of the Content . You acknowledge that other persons may have submitted Content to us, may have made public or developed, or may originate, submit, make public or develop, material similar or identical to all or a portion of your Content or concepts contained therein, and you understand and agree that you will not be entitled to any compensation because of the use or exploitation thereof and the submission of Content, or any posting or display thereof, is not any admission of novelty, priority, or originality. Even if you subsequently see or learn of a presentation, motion picture, still photograph, film, video, or any other content which appears to incorporate any idea or concept or include anything similar or identical to that contained in any Content you or anyone else submits, that is purely coincidental and unavoidable. Disclaimer and Limitation of Liability THE WEBSITE IS PROVIDED \"AS IS\" WITH NO WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, AND YOUR USE OF THE WEBSITE IS AT YOUR OWN RISK. YOU ARE SOLELY RESPONSIBLE FOR YOUR CONTENT, THE REPRESENTATIONS AND OBLIGATIONS UNDER THESE TACOS, AND FOR ANY DAMAGES TO YOUR COMPUTER SYSTEM OR LOSS OF DATA RESULTING FROM YOUR USE OF THE SITE. LUZFALTEX EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, INCLUDING, WITHOUT LIMITATION, WARRANTIES CONCERNING ACCESS TO AND/OR THE AVAILABILITY, ACCURACY, USEFULNESS, AND/OR SECURITY OF THE SITE, SERVER, OR LORE SUBMISSION FEATURES, ANY CONTENT, MATERIAL, SOFTWARE, INFORMATION, DATA, SOFTWARE, CAPABILITIES MADE AVAILABLE TO YOU, RESOURCES, FACILITIES, PRODUCTS, AND/OR SERVICES, AND WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE, OR THAT THE WEBSITE OR SERVER WILL FUNCTION OR PERFORM IN ANY PARTICULAR MANNER.THE WEBSITE AND SERVER ARE MAINTAINED ON SERVERS IN THE UNITED STATES INTENDED FOR USERS AND USE THAT IS NOT PROHIBITED BY LAW OR REGULATION. LUZFALTEX DISCLAIMS ALL LIABILITY FOR ANY USE NOT SPECIFICALLY AUTHORIZED OR THAT IS IN VIOLATION OF THESE TACOS OR THE LAWS OR REGULATIONS THAT MAY APPLY TO YOU IN ANY JURISDICTION OUR COUNTRY. LUZFALTEX EXPRESSLY DISCLAIMS ALL LIABILITY FOR ANY AND ALL DAMAGES, WHETHER DIRECT, CONSEQUENTIAL, SPECIAL, INDIRECT, EXEMPLARY, OR PUNITIVE DAMAGES, HOWSOEVER ARISING OR CAUSED, WHETHER FORESEEABLE OR NOT, REGARDLESS OF THE FORM OF ACTION OF THE BASIS OR CHARACTERIZATION OF THE CLAIM AND EVEN IF ADVISED OF THE POSSIBILITY OF DAMAGES. These TACOS are effective immediately and are very tasty"
  },
  "legal/tacos-overview.html": {
    "href": "legal/tacos-overview.html",
    "title": "TACOS Overview | LuzFaltex Documentation",
    "keywords": "Terms and Conditions of Service Important This overview page is a human readable summary and is not a replacement for the TACOS . The Terms and Conditions of Service (herein \"TACOS\") is our version of a Terms of Service agreement. The TACOS specify an agreement between you and LuzFaltex which govern your use of of our content, sites, services, and products (herein \"projects\"). Additional agreements may be imposed at the project level, such as licensing agreements and codes of conduct related to the particular project. By using any of our projects, you agree to be bound by the following: The TACOS The Privacy Policy The Code of Conduct Project-specific agreements Failure to abide by these policies may result in disciplinary action up to and including a permanent ban from all of our projects. User Content Note The projects made available to you by LuzFaltex are available only to persons 13 years or older. If you are younger than 13 years old, please get permission from your parent or legal guardian before accessing any Projects. Some projects may impose additional access restrictions. Please see the agreements of each Project before using said Project. When you submit content, be it through forum posts, private messages, or other means, you retain ownership over said content. However, by doing so you grant us the right to host, display, and use your content for the purposes specified. Some submissions, such as edits or additions to the LuzFaltex Docs site, are released to us under additional terms. You will be informed at the time of your submission the terms under which you submit the content. LuzFaltex absolves itself of any and all responsibility or liability for or in connection with any content. If your content is found to infringe on a third-party's copyright or other intellectual property rights, is malicious in nature, is obscene or pornographic, or otherwise violates these TACOS or any other policy, you will be responsible for any and all consequences for the use of the content. We reserve the right to remove or disable access to any content that violates the agreements. Copyright Note You can send copyright notices and counter-notices to our DMCA agent at copyright@luzfaltex.com . If you are a copyright owner or agent thereof and believe that any Content infringes upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (\"DMCA\") by providing our Copyright Agent with the following information in writing (see 17 U.S.C. 512(c)(3) for further detail): A physical or electronic signature of the owner or person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; Identification of the copyrighted work claimed to have been infringed, or if multiple copyrighted works are covered by a single notification, a representative list of such works; Identification of the Content that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled and information reasonably sufficient to permit LuzFaltex to locate the material; Information reasonably sufficient to permit LuzFaltex to contact you, such as an address, telephone number, and, if available, an electronic mail; A statement that you have good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent, or the law; and A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed."
  },
  "legal/privacy-policy.html": {
    "href": "legal/privacy-policy.html",
    "title": "Privacy Policy | LuzFaltex Documentation",
    "keywords": "LuzFaltex Privacy Policy LuzFaltex is committed to protecting the privacy of visitors, members, and volunteers who use our our websites and services (herein \"services\"). LuzFaltex has established this Privacy Policy to explain what information we collect through our services and how it is used, as well as protections for our members' personal information. In this Policy, \"LuzFaltex\" refers to LuzFaltex staff, board members, cooperating attorneys, interns, volunteers, and consultants. LuzFaltex does not sell or rent member or website visitor information under any circumstances , and we do not share member or visitor information without prior consent except as compelled by law. This domain (luzfaltex.com) complies with user opt-outs from tracking via the \"Do Not Track\" or \"DNT\" header . This file will always be posted via HTTPS at https://www.LuzFaltex.com/.well-known/dnt-policy.txt to indicate this fact. This privacy policy shall cover the use of LuzFaltex.com and any LuzFaltex Project site. Security LuzFaltex employs industry standard security measures to protect from the loss, misuse, and alteration of the information under our control. LuzFaltex has turned on HTTPS by default, and has further strengthened security by enabling HTTP Strict Transport Security or \"HSTS\" preloading. HSTS preloading informs your internet browser that it should ONLY connect to LuzFaltex.com through HTTPS. Our security certificates are provided by Let's Encrypt™ , a group dedicated to bringing security and ease-of-use to the internet. Let's Encrypt is a trademark of the Internet Security Research Group. All rights reserved. Information Gathered by LuzFaltex's Site Cookies: We do not use persistent ID cookies on this site except when you click \"remember me\" or are logged in. We use session cookies on certain portions of the website. Session cookies expire when you close your browser. Voluntarily Submitted Information: In addition, LuzFaltex collects and retains information you voluntarily submit to us. It is up to you whether to submit information to us, and how much information you provide. If you choose to become a member, we may ask for identifying information such as your name, email address, and birthday, and retain that information. Additional information, such as (but not limited to) gender, hobbies and interests, and additional contact options, may be collected and stored. This information will be retained until manually removed by the user or by administrative action, such as enforcement of the TACOS or account closure. From time to time, we may ask for personal information on other portions of the site or on any Project site, such as asking you to participate in a contest, or when you provide feedback or comments. Additionally, any information you release on the forums in the form of posts may be retained as long as that post is in existence. A post is defined as any single comment, whether starting a new thread or replying to an existing thread, or commenting on a user's profile or any other location. Modifying the post will not remove this information (edit history is retained so you can roll back if you make a mistake). If you wish to remove an entire thread or post, mark it as trash. An automated trash collector will collect and dispose of trashed threads after having been in the trash for 30 days. Personally identifiable information that is automatically collected by our system (e.g. IP addresses in access logs) will be automatically deleted after seven days, unless retaining that information is necessary for the purpose of conducting an audit or diagnosing and preventing an attack. This cleanup policy does not include voluntarily submitted information placed on your profile (such as contact information) or anything posted in the forum or other sites. If personally identifiable information was requested from you by a member of staff when providing support, the personally identifiable information will be scrubbed from the thread after its use has expired. Members of staff will NEVER ask you for your password. Please do not give your password to anyone, even if they say they are a LuzFaltex employee. Please note that personally identifiable information, even after deleted, may remain on backup media. If a user is banished by IP, their IP address may remain in the system for the duration of the banishment. LuzFaltex's Use of Information In general, LuzFaltex uses the information provided by you to provide and maintain a collective community experience. Member Information: We use member information to process and manage your membership. On occasion, LuzFaltex may send you emails regarding urgent updates. We will never send you ads or malicious content, though the message may contain names of third parties responsible for providing us with a service. If you receive an email from any email address @LuzFaltex.com with an ad or with malicious content, please forward the email to security@luzfaltex.com . Alternatively, you may send an email to that address with information about the ad or malicious content that was sent. Screenshots of the content are appreciated and recommended, but are not required. However, we are not a reporting agency for emails. Do not send us malicious emails sent from domains other than LuzFaltex.com. For the avoidance of doubt... Do not send mail regarding user@example.com Do send mail regarding user@LuzFaltex.com Other Activities: We may run surveys, contests, or similar activities through this site. Such information will be used for the purposes for which it was collected and will only be collected if you opt-in. To opt-in, you must explicitly share the information with us - we will not collect it from your profile or threads. We use the information provided through our online shop to fulfill your order, and address any problems that might arise. We also look at technical information to diagnose problems with or consider improvements to our servers or related technologies and to administer LuzFaltex.com and other services we host or provide. We may retain aggregated, anonymous information for extended periods for this purpose. This can be things such as \"X users connected this month,\" but not information such as \"Mary Sue at 127.0.0.1 connected 37 times in the last 30 days.\" Third-Party Service Providers to LuzFaltex LuzFaltex uses Stripe to complete transactions. Please read Stripe's policies for more information. LuzFaltex's service providers may log standard technical information, such as the numeric Internet Protocol (IP) address of the computer you are using; the browser software you use and your operating system; the date and time you access our site; and the Internet address of the website from which you linked directly to our site. Third-Party Services and APIs LuzFaltex's site also provides links to or interacts with a wide variety of third-party websites, including interactive links to sites like social media or video hosting websites, often via application programming interfaces ( APIs ). LuzFaltex is not responsible for, and does not have control over, the privacy practices or the content of such third parties. We encourage users to read the privacy policies of any website visited via links from or interactions with the LuzFaltex website. Disclosure of Your Information While LuzFaltex endeavors to provide the highest level of protection for your information, we may disclose personally identifiable information about you to third parties in limited circumstances, including: with your explicit consent; or when we have good faith belief it is required by law, such as pursuant to a subpoena or other judicial or administrative order. If we are required by law to disclose the information that you have submitted, we will attempt to provide you with prior notice (unless we are prohibited or it would be futile) that a request for your information has been made in order to give you an opportunity to object the disclosure. We will attempt to provide this notice by email, if you have given us an email address. If you do not challenge the disclosure request, we may be legally required to turn over your information. In addition, we will independently object to requests for access to information about users of our site that we believe to be improper. Updating or Removing Your Information You may choose to correct, update, or delete account information you have submitted to us using the account management page. Other information, including but not limited to information disclosed in posts, may remain on the servers until manually deleted by you or through administrative action. If we inadvertently collect more information than intended, we endeavor to delete the extraneous information. However, please understand that deleted information may continue to persist on backup media. Changes to Our Policies LuzFaltex's privacy policy may change from time to time. While we will make a best effort to inform you of updates, we are not required to do so, and may change or update this notice at any time without notice. Although we make good faith efforts to store information collected by LuzFaltex in a secure operating environment, we cannot guarantee complete security. Information collected by LuzFaltex will be maintained for a length of time appropriate to our needs. If any part of this agreement is declared unenforceable or invalid, the remainder will continue to be valid and enforceable. Links to all of these documents will be available at the bottom of all pages on the Website. You can view a complete update history for this policy by reviewing the history page for this document."
  },
  "legal/privacy-overview.html": {
    "href": "legal/privacy-overview.html",
    "title": "Privacy Policy Overview | LuzFaltex Documentation",
    "keywords": "Privacy Policy Overview Important This overview page is a human readable summary and is not a replacement for the Privacy Policy LuzFaltex is committed to protecting the privacy of visitors to our websites and services, as well as our members and volunteers. Tip LuzFaltex does not sell or rent member or website visitor information under any circumstances and we will independently object to disclosure of your information except where compelled by law. We will not [x] Sell or lease your information [x] Give away your information (except where legally required) [x] Send you email spam We will [x] Comply with Do Not Track regulations [x] Provide all sites and services over HTTPS and strengthen connections by enabling HTTP Strict Transport Security [x] Delete information we are not using [x] Anonymize technical information [x] Comply with the General Data Protection Regulation guidelines. Contact information"
  },
  "contribute/includes/contribute-how-to-pull-requests-apex-automation.html": {
    "href": "contribute/includes/contribute-how-to-pull-requests-apex-automation.html",
    "title": "| LuzFaltex Documentation",
    "keywords": "Comment automation enables read-level users (users who don't have write permissions in a repo) to perform a write-level action, by assigning the appropriate label to a pull request. If you are working in a repository where comment automation has been implemented, use the hashtag comments listed in the following table to assign labels, change labels, or close a pull request. Microsoft employees will also be notified via e-mail for review and sign-off of public repository PRs, whenever changes are proposed to articles for which you are the author. Hashtag comment What it does Repo availability #sign-off When the author of an article types the #sign-off comment in the comment stream, the ready-to-merge label is assigned. This label lets the reviewers in the repo know when a pull request is ready for review/merge. Public and private #sign-off If a contributor who is not the listed author tries to sign off on a public pull request by using the #sign-off comment, a message is written to the pull request indicating that only the author can assign the label. Public #hold-off Authors can type #hold-off in a PR comment to remove the ready-to-merge label--in case they change their mind or make a mistake. In the private repo, this assigns the do-not-merge label. Public and private #please-close Authors can type #please-close in the comment stream to close the pull request if they decide not to have the changes merged. Public"
  },
  "contribute/code/workflow.html": {
    "href": "contribute/code/workflow.html",
    "title": "Contribution Workflow | LuzFaltex Documentation",
    "keywords": "Contribution Workflow You can contribute to LuzFaltex code with issues and PRs. Simply filing issues for problems you encounter is a great way to contribute. Contributing implementations is greatly appreciated. Suggested Workflow We use and recommend the following workflow: Create an issue for your work. You can skip this step for trivial changes Reuse an existing issue on the topic, if there is one. Use the project's CODE_OWNERS.TXT to find relevant maintainers and @ mention them to ask for feedback on your issue. Get agreement from the team and the community that your proposed change is a good one. If your change adds to a new API, follow the API Review Process . Clearly state that you are going to take on implementing it, if that is the case. You can request that the issue be assigned to you. Note: The issue filer and implementer don't have to be the same person. Create a personal fork of the repository (if you don't already have one.) Create a branch off of master ( git checkout -b mybranch ). Name the branch so that it clearly communicates your intentions, such as issue-123 or username-issue Branches are useful since they isolate your changes from incoming changes upstream. They also enable you to create multiple PRs for the same fork. Make and commit your changes. Please follow our Commit Message guidance. Add new tests corresponding to your change, if applicable. Build the repository with your changes. Make sure the builds are clean. Make sure that the tests are all passing, including your new tests. Create a new pull request (PR) against the upstream repository's master branch. Push your changes to your fork (if you haven't already) Note: It's okay for your PR to include a large number of commits. Once your change is accepted, you will be asked to squash your commits into one or some appropriately small number of commits before your PR is merged. Note: It's OK to create your PR as \"[WIP]\" before the implementation is done. This can be useful if you'd like to start the feedback process concurrent with your implementation. State that this is the case in the initial PR comment. PR - CI Process The LuzFaltex Continuous Integration (CI) system will automatically perform the required builds and run tests (including the ones you are expected to run) for PRs. Builds and test runs must be clean. If the CI build fails for any reason, the PR issue will be updated with a link that can be used to determine the cause of the failure. PR Feedback LuzFaltex Team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback. One or more LuzFaltex team members will review every PR prior to merge. They will often reply with \"LGTM.\" That meas that the PR will be merged once the feedback is resolved. \"LGTM\" == \"looks good to me.\" There are lots of thoughts and approaches for how to efficiently discuss changes. It is best to be clear and explicit with your feedback. Please be patient with people who might not understand the finer details about your approach to feedback."
  },
  "contribute/code/issue-guide.html": {
    "href": "contribute/code/issue-guide.html",
    "title": "Issue Guide | LuzFaltex Documentation",
    "keywords": "Issue Guide This page outlines how the LuzFaltex team thinks about and handles issues. For us, issues represent actionable work that should be done at some future point. IT may be as simple as a small product or test bug or as large as the work tracking the design of a new feature. We will keep issues open even if the LuzFaltex team internally has no plans to address them in an upcoming release, as long as we consider the issue to fall under are purview. When we close issues As noted above, we don't close issues just because we don't plan to address them in an upcoming release. So why do we close issues? There are a few major reasons: Issues unrelated to LuzFaltex projects. When possible, we'll try to find a better home for the issue and point you to it. Cross-cutting work better suited for another team. Sometimes the line between the framework and the product blurs. For some issues, we may feel that the work is better suited for the framework team or a particular project team or another partner. In these cases, we'll close the issue and open it with the partner team. If they end up not deciding to take on the issue, we can reconsider it here. Sometimes after debate, we'll decide that an issue isn't a good fit. In that case, we'll also close it. Because of this, we ask that you don't start working on an issue until it's tagged with up-for-grabs or api-approved . Both you and the team will be unhappy if you spend time and effort working on a change we'll ultimately be unable to take. We try to avoid that. Labels We use labels on our issues in order to classify them. We have the following categories per issue: Area : These area-* labels call out the assembly or assemblies the issue applies to. In addition to labels per assembly, we have a few other area labels: aria-infrastructure for issues that relate to our build or test infrastructure and area-Meta for issues that deal with the repository itself, the direction of the project, our processes, etc. See the [full list of areas] for more information(#areas). Issue Type : These labels classify the type of issue. We use the following types: bug : Bugs in an assembly api-* : Issues which should add APIs to an assembly (see the API Review Process for details). enhancement : Improvements to an assembly which do not add new APIs (e.g. performance improvements, code cleanup). test bug : Bugs in the tests for a specific assembly. test enhancement : Improvements in the tests for a specific assembly (e.g. improving test coverage). documentation : Issues related to documentation (e.g. incorrect documentation, enhancement requests). question : Questions about the product, source code, etc. Other : up-for-grabs : Small sections of work which we believe are well scoped. These sorts of issues are a good place to start if you're new. Anyone is free to work on these issues. needs more info : Issues which need more information to be actionable. Usually this will be because we can't reproduce a reported bug. We'll close these issues after a little bit if we haven't gotten actionable information, but we welcome folks who have acquired more information to open the issue. blocked : Issues which can't proceed until another issue is resolved. third-party : Issues which are caused by a third-party library os-linux , os-windows , os-mac-os-x : Identifies an issue as being related to a particular OS. Add as many of these as are appropriate. In addition to the above, we have a handful of other labels we use to help classify our issues. Some these tag cross-cutting concerns whereas others are used to help us track additional work needed before closing an issue. Milestones We use milestones to prioritize work for each upcoming release. Assignee We assign each issue to an assignee, when the assignee is ready to pick up the work and start working on it. If the issue is not assigned to anyone and you want to pick it up, please say so - we will assign the issue to you. If the issue is already assigned with someone, please coordinate with the assignee before you start working on it. Areas Areas are tracked by labels area-* . Each area typically corresponds with one or more contract assemblies. Area Owners / Experts Description area-Infrastructure @foxtrek64 Covers: Packaging Build and test infrastructure area-Meta @foxtrek64 Issues without clear association to any API/Contract, e.g. New contract proposals Project docs Contract Assemblies LuzFaltex.Authentication @foxtrek64 Reusable authentication library Triage rules - simplified Each issue has exactly one area-* label Issue has no Assignee, unless someone is working on the issue at the moment Use up-for-grabs as much as possible, ideally with a quick note about next steps / complexity of the issue. Set milestone to Future Each issue has exactly one \"issue type\" label ( bug , enhancement , api-needs-work , test bug , test enhancement , question , documentation , etc.) Don't be afraid to say no or close issues - just explain why and be polite Don't be afraid to be wrong - just be flexible when new information appears. Feel free to use any additional labels if it helps your triage efforts. Motivation for triage rules Each issue has exactly one area-* label Motivation: Issues with multiple areas have loose responsibility (everyone blames the other side) and issues are double counted in reports. Issue has no Assignee unless someone is working on the issue at the moment. Motivation: Observation is that contributors are less likely to grab assigned issues, no matter what the repo rules say. Use up-for-grabs as much as possible, ideally with a quick note about the next steps / complexity of the issue. Note: Per up-for-grabs.net , such issues should be no longer than a few night's worth of work. They should be actionable (i.e. no mysterious CI failures or issues that can't be tested in the open). Set milestone to Future Motivation: Helps communicate desire/timeline to the community. Can spark further priority/impact discussion. Each issue has exactly one \"issue type\" label Don't be afraid to be wrong when deciding bug vs test bug (flip a coin if you must). The most valuable values for tracking are api-* vs. enhancement , question , and documentation . Don't be afraid to say no, or just close issues - just explain why and be polite. Don't be afraid to be wrong - just be flexible when new information appears. PR Rules Each PR has exactly one area-* label Motivation: Area owners will get email notifications about new issues in their area. PR as Assignee set to author of the PR. If it is a non-LuzFaltex engineer, then area owners are co-assignees. Motivation: Area owners are responsible and do code reviews for PRs from external contributors. CoreFX engineers know how to get code reviews from others. [Optional] Set milestone according to the branch ( master = 2.1, release/2.0 = 2.0, release/1.0 = 1.0, etc.) Motivation: Easier to track where fix ended and if it needs to be ported into another branch. Note: This is easily done after merge via simple queries and bulk-edits. You don't have to do this one. Any other labels on PRs that are superfluous and not needed (exceptions: blocked ) Motivation: All the important info (\"issue type\" label, api approval label, OS label, etc.) is already captured on the associated issue(s). Stuck or long-term blocked PRs (e.g. due to missing API approval, etc.) should be be closed and reopened once they are unstuck. Motivation: Keep only active and WIP PRs. If a PR is stale and there is not an immediate path forward, consider closing the PR until it is unblocked/unstuck. PR should be linked to the related issue(s) using auto-closing tags (e.g. \"Fixes #1234\")."
  },
  "contribute/code/framework-design-guidelines-digest.html": {
    "href": "contribute/code/framework-design-guidelines-digest.html",
    "title": "Framework Design Guidelines - Digest | LuzFaltex Documentation",
    "keywords": "Framework Design Guidelines - Digest This page is a distillation and simplification of the most basic guidelines described in detail in a book titled Framework Design Guidelines by Krzysztof Cwalina and Brad Abrams. Framework Design Guidelines were created in the early days of .NET Framework development. They started as a small set of naming and design conventions but have been enhanced, scrutinized, and refined to a point where they are generally considered the canonical way to design frameworks at Microsoft and LuzFaltex. They carry the experience and cumulative wisdom of thousands of developer hours over several versions of the .NET Framework. General Design Principals Scenario-Driven Design Start the design process of your public API by defining the top scenarios for each feature area. Write your code you would like the end users to write when they implement these secnarios using your API. Design your API based on the sample code you wrote. For example, when designing an API to measure elapsed time, you may write the following scenario code samples: // Scenario #1 : measure time elapsed Stopwatch watch = Stopwatch.StartNew(); DoSomething(); Console.WriteLine(watch.Elapsed); // Scenario #2 : reuse stopwatch Stopwatch watch = Stopwatch.StartNew(); DoSomething(); Console.WriteLine(watch.ElapsedMilliseconds); watch.Reset(); watch.Start(); DoSomething(); Console.WriteLine(watch.Elapsed); // Scenario #3 : ... Usability Studies Test usability of your API. Choose developers who are not familiar with your API and have them implement the main scenarios. Try to identify which parts of your API are not intuitive. Self-Documenting API Developers using your API should be able to implement the main scenarios without reading the documentation. Help users to discover what types they need to use in main scenarios and what the semantics of the main methods are by choosing intuitive names for most used types and members. Talk about naming choices during specification reviews. Understand Your Customer Realize that the majority of your customers are not like you. You should design the API for your customer, not for developers working in your close working group, who unlike the majority of your customers are experts in the technology you are trying to expose. Naming Guidelines Casing and naming guidelines apply only to public and protected identifiers, and privately implemented interface members. Teams are free to choose their own guidelines for internal and private identifiers. DO use PascalCasing for all identifiers except parameter names. For example, use TextColor rather than Textcolor or Text_Color . DO use camelCasing for all member parameter names. Prefix descriptive type parameter names with T . public interface ISessionChannel<TSession> where TSession : ISession { TSession Session { get; } } CONSIDER using T as the type parameter name for types with one single letter type parameter. DO use PascalCasing or camelCasing for any acronyms over two characters long. For example, use HtmlButton rather than HTMLButton , but System.IO instead of System.Io . DO NOT use acronyms that are not generally accepted in the field. DO use well-known acronyms only when absolutely necessary. For example, use UI for User Interface and Html for Hyper-text Markup Language. DO NOT use shortenings or contractions as part of identifier names. For example, use GetWindow rather than GetWin . DO NOT use underscores, hyphens, or any other non-alphanumeric characters. DO NOT use Hungarian Notation DO name types and properties with nouds or noun phrases DO name methods and events with verbs or verb phrases. Always give event names that have a concept of before and after using the present particle and simple past tense. For example, an event that is raised before a Form closes should be named Closing . An event named after a Form is closed should be named Closed . DO NOT use the Before or After prefixes to indicate pre- and post-events. DO use the following prefixes: I for interfaces. T for generic type parameters (except single letter parameters) DO use the follwing postfixes: Exception for types inheriting from System.Exception . Collection for types inheriting from IEnumerable . Dictionary for types implementing IDictionary or IDictionary<K,V> . EventArgs for types inheriting from System.EventArgs . EventHandler for types inheriting from System.Delegate . Attribute for types inheriting from System.Attribute . DO NOT use the postfixes above for any other types DO NOT postfix type names with Flags or Enum . DO use plural noun phrases for flag enums (enums with values that support bitwise operations) and singular noun phrases for non-flag enums. DO use the following template for naming namespaces: <Company>.<Technology>[.Feature>] For example, Microsoft.Office.ClipGallery . Operating system components should use System namespaces. DO NOT use organizational heirarchies as the basis for namespace heirarchies. Namespaces should correspond to scenarios regardless of what teams contribute APIs for those scenarios. General Design Guidelines DO use the most derived type for return values and the least derived type for input parameters. For example, take IEnumerable as an input parameter but return Collection<string> as the return type. Provide a clear API entry point for every scenario. Every feature area should have preferably one, but sometimes more, types that are the starting points for exploring given technology. We call such types Aggregate Components. Implementation of a large majority of scenarios in a given technology area should start with one of the Aggregate Components. DO write sample code for your top scenarios. The first type used in all of these samples should be an Aggregate Component and the sample code should be straightforward. If the code gets longer than several lines, you need to redesign. Writing to an event log in Win32 API was around 100 lines of code. Writing to .NET Framework EventLog takes one line of code. DO model higher level concepts (physical objects) rather than system level tasks with Aggregate Components. For example File , Directory , Drive are easier to understand than Stream , Formatter , Comparer . DO NOT require users of your API to instantiate multiple objects in main scenarios. Simple tasks should be done with a new statement. DO support so called \"Create-Set-Call\" programming style in all AggregateComponents. It should be possible ot instantiate every component with the default constructor, set one or more properties, and call simple methods or respond to events. var applicationLog = new EventLog(); applicationLog.Source = \"MySource\"; applicationLog.WriteEntry(exception.Message); DO NOT require extensive instantialization before Aggregate Components can be used. If some initialization is necessary, the exception resulting from not having the component initialized should clearly explain what needs to be done. DO carefully choose names for your types, methods, and parameters. Think hard about the first name people will try typing in the code editor when they explore the feature area. Reserve and use this name for the Aggregate Component. A common mistake is to use the \"best\" name for a base type. Run FxCop on your libraries. DO ensure your library is CLS compliant. Apply CLSCompliantAttribute to your assembly. DO prefer classes over interfaces. DO NOT seal types unles you have a strong reason to do it. DO NOT create mutable value types. DO NOT ship abstractions (interfaces or abstract classes) without providing at least one concrete type implementing each abstraction. This helps to validate the interface design. DO NOT ship interfaces without providing at least one API consuming the interface (A method taking the interface as a parameter). This helps validate the interface design. AVOID public nested types. DO apply FlagsAttribute to flag enums. DO strongly prefer collections over arrays in public APIs. DO NOT use ArrayList , List<T> , HashTable , or Dictionary<K,V> in public APIs. Use Collection<T> , ReadOnlyCollection<T> , KeyedCollection<K,V> , or CollectionBase subtypes instead. Note that the generic collections are only supported in the Framework version 2.0 and above. DO NOT use error codes to report failures. Use Exceptions instead. DO NOT throw Exception or SystemException AVOID catching the Exception base type. DO prefer throwing existing common general purpose exceptions like ArgumentNullException , ArgumentOutOfRangeException , InvalidOperationException instead of defining custom exceptions. Throw the most specific exception possible. DO ensure that exception messages are clear and actionable. DO use EventHandler<T> for events, instead of manually defining event handler delegates. DO prefer event-based APIs over delegate-based APIs. DO prefer constructors over factory methods. DO NOT expose public fields. Use properties instead. DO prefer properties for concepts with a logical backing store but use methods in the following cases: The operation is a conversion (such as object.ToString() ) The operation is expensive (orders of magnitude slower than a field set would be) Obtaining a property value using the Get accessor has an observable side effect Calling the member twice in succession results in different results The member returns an array. Note: Mmebers returning arrays should return copies of an internal master array, not a reference to the internal array. DO allow properties to be set in any order. Properties should be stateless with respect to other properties. DO NOT make members virtual unless you have a strong reason to do it. AVOID finalizers. DO implement IDisposable on all types acquiring native resources and those that provide finalizers. DO be consistent in the ordering and naming of method parameters. It is common to have a set of overloaded methods with an increasing number of parameters to allow the developer to specify a desired level of information. DO make sure all the related overloads havea consistent parameter order (same parameter shows up in the same place in the signature) and naming pattern The only method in such a group that should be virtual is the one that has the most parameters and only when extensibility is needed. public class Foo { private readonly string _defaultForA = \"default value for a\"; private readonly int _defaultForB = 42; public void Bar() { Bar(_defaultForA, _defaultForB); } public void Bar(string a) { Bar(a, _defaultForB); } public void Bar(string a, int b) { // Core implementation here } } AVOID out and ref parameters. Resources FxCop is a code analysis tool that checks managed code assemblies for conformance with the Framework Design Guidelines (also see MSDN ). Presentations: Overview of the Framework Design Guidelines TechEd 2007 Presentation about framework engineering"
  },
  "contribute/validation-reference/markdown-headings.html": {
    "href": "contribute/validation-reference/markdown-headings.html",
    "title": "Markdown Headings | LuzFaltex Documentation",
    "keywords": "Markdown headings The following validation requirements apply to headings in OPS Markdown files. H1 H1 refers to the first heading in a Markdown file. When published to docs.microsoft.com, the H1 shows at the top of the page in a large font. An H1 is created by beginning a line with a single hash ( # ) followed by a space, then the heading text. For example, the H1 of this article is: # Markdown headings The following rules apply to H1 headings: An H1 must be present in the file. There can only be one H1. The H1 must have content. # This is not allowed. There must be a space between the # and the H1 content. An H1 with no space doesn't render as a heading on the published page. #This looks bad on the site. The H1 must be the first content in the file after the YML metadata header. No content, such as text or images, is allowed between the end of the YML header and the H1. --- ... YML would go here --- ![cheerful image](not-allowed.jpg) # This cheer is not allowed The HTML element for first-level headings, <h1> , should not be used. Use the Markdown syntax ( # ). The H1 should be no more than 100 characters long. This is a style guideline. H2 - H6 H2 ( ## ) through H6 ( ###### ) are allowed in OPS. Use the Markdown headers, not the HTML ( <h2> - <h6> ), to create headings."
  },
  "contribute/includes/contribute-how-to-write-workflows-pull-request-processing.html": {
    "href": "contribute/includes/contribute-how-to-write-workflows-pull-request-processing.html",
    "title": "Pull request processing | LuzFaltex Documentation",
    "keywords": "Pull request processing The previous section walked you through the process of submitting proposed changes, by bundling them in a new pull request (PR) that is added to the destination repository's PR queue. A pull request enables GitHub's collaboration model, by asking for the changes from your working branch to be pulled and merged into another branch. In most cases, that other branch is the default/master branch in the main repository. Validation Before your pull request can be merged into its destination branch, it might be required to pass through one or more PR validation processes. Validation processes can vary depending on the scope of proposed changes and the rules of the destination repository. After your pull request is submitted, you can expect one or more of the following to happen: Mergeability : A baseline GitHub mergeability test occurs first, to verify whether the proposed changes in your branch are in conflict with the destination branch. If the pull request indicates that this test failed, you must reconcile the content that is causing the merge conflict before processing can continue. CLA : If you are contributing to a public repository and are not a Microsoft employee, depending on the magnitude of the proposed changes, you might be asked to complete a short Contribution License Agreement (CLA) the first time you submit a pull request to that repository. After the CLA step is cleared, your pull request is processed. Labeling : Labels are automatically applied to your pull request, to indicate the state of your pull request as it passes through the validation workflow. For instance, new pull requests might automatically receive the \"do-not-merge\" label, indicating that the pull request has not yet completed the validation, review, and sign-off steps. Validation and build : Automated checks verify whether your changes pass validation tests. The validation tests might yield warnings or errors, requiring you to make changes to one or more files in your pull request before it can be merged. The validation test results are added as a comment in your pull request for your review, and they might be sent to you in e-mail. Staging : The article pages affected by your changes are automatically deployed to a staging environment for review upon successful validation and build. Preview URLs appear in a PR comment. Auto-merge : The pull request might be automatically merged, if it passes validation testing and certain criteria. In this case, you don't need to take any further action. Review and sign-off After all PR processing is completed, you should review the results (PR comments, preview URLs, etc.) to determine if additional changes to its files are required before you sign off for merging. If a PR reviewer has reviewed your pull request, they can also provide feedback via comments if there are outstanding issues/questions to be resolved prior to merge. Comment automation enables read-level users (users who don't have write permissions in a repo) to perform a write-level action, by assigning the appropriate label to a pull request. If you are working in a repository where comment automation has been implemented, use the hashtag comments listed in the following table to assign labels, change labels, or close a pull request. Microsoft employees will also be notified via e-mail for review and sign-off of public repository PRs, whenever changes are proposed to articles for which you are the author. Hashtag comment What it does Repo availability #sign-off When the author of an article types the #sign-off comment in the comment stream, the ready-to-merge label is assigned. This label lets the reviewers in the repo know when a pull request is ready for review/merge. Public and private #sign-off If a contributor who is not the listed author tries to sign off on a public pull request by using the #sign-off comment, a message is written to the pull request indicating that only the author can assign the label. Public #hold-off Authors can type #hold-off in a PR comment to remove the ready-to-merge label--in case they change their mind or make a mistake. In the private repo, this assigns the do-not-merge label. Public and private #please-close Authors can type #please-close in the comment stream to close the pull request if they decide not to have the changes merged. Public When the pull request is issue-free and signed off, your changes are merged back into the parent branch and the pull request is closed. Publishing Remember, your pull request has to be merged by a PR reviewer before the changes can be included in the next scheduled publishing run. Pull requests are normally reviewed/merged in the order of submission. If your pull request requires merging for a specific publishing run, you will need to work with your PR reviewer ahead of time to ensure that merging happens prior to publishing. After your contributions are approved and merged, the docs.microsoft.com publishing process picks them up. Depending on the team that manages the repository you are contributing to, publishing times can vary. Articles published under the following paths are normally deployed at approximately 10:30 AM and 3:30 PM Pacific Time, Monday-Friday: https://docs.microsoft.com/azure/ https://docs.microsoft.com/aspnet/ https://docs.microsoft.com/dotnet/ https://docs.microsoft.com/enterprise-mobility-security It can take up to 45 minutes for articles to appear online after publishing. After your article is published, you can verify your changes at the appropriate URL: https://docs.microsoft.com/<path-to-your-article-without-the-md-extension> ."
  },
  "contribute/code/contributing.html": {
    "href": "contribute/code/contributing.html",
    "title": "Contributing to LuzFaltex Code | LuzFaltex Documentation",
    "keywords": "Contributing to LuzFaltex Code This document describes contribution guidelines for LuzFaltex Code repos available both here on GitHub and on code.luzfaltex.com . The LuzFaltex Code team maintains the following guidelines for contributing to the LuzFaltex Code repos. If you have any questions regarding a specific policy, please feel free to reach out to the code team through our Discord (link coming soon) or create an issue. General contribution guidance is included in this document. Additional guidance is defined in the documents linked below. Copyright describes the licensing practices for our projects. Contribution Workflow describes the workflow that the team uses for considering and accepting changes. Coding Style We intend to develop code in full conformance with the style guidelines described in the C# Coding Style . However, sometimes older code may not follow the current style. Please refer to the notes below: DO NOT send PRs for style changes. For example, do not send PRs that are focused on changing the usage of Int32 to int . DO NOT send PRs for upgrading code to use newer language features, though it's okay to use newer language features as part of new code that's written. For example, it's okay to use expression-bodied members as part of new code you write, but do not send a PR focused on changing existing properties or methods to use the feature. DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. In the event you find a document which contains code that does not conform to the Coding Style, please refer to the project's CODE_OWNERS.TXT to find the maintainer for the project and create an issue, tagging them in said issue and identifying the relevant code files. API Changes DO NOT submit PRs to change an API until the changes in the issues have been approved via the API Review Process . Contribution \"Bar\" Project maintainers will merge changes that improve the product significantly and broadly and that align with the Project Roadmap. Maintainers will not merge changes that have narrowly-defined benefits due to compatibility risk. The LuzFaltex codebase is used by several LuzFaltex projects to enable minimization of code and efficiency. Other companies may build on top of LuzFaltex code, whether developing extensions or customizations, or leveraging an open source base library. Contributions must also satisfy the other published guidelines defined in this document. Pull Requests DO submit all code changes via pull requests (PRs) rather than through a direct commit. PRs will be reviewed and potentially merged by the repo maintainers after a peer review that includes at least one maintainer. DO submit \"work in progress\" PRs. A work-in-progress PR should have [WIP] placed in the PR title before the title itself. This can be useful for grouping multiple issues into one. DO give PRs short but descriptive names (e.g. \"Add LDAP authentication method to LuzFaltex.Authentication library\", not \"Fix #1234\"). DO refer to any relevant issues and include keywords that automatically close issues when the PR is merged. DO tag any users that should know about and/or review the change. DO ensure each commit successfully builds. The entire PR must pass all tests in the Continuous Integration (CI) system before it'll be merged. DO address PR feedback in an additional commit(s) rather than amending the existing commits, and only rebase/squash them when necessary. This makes it easier for reviewers to track changes. DO assume that \"Squash and Merge\" will be used to merge your commit unless you request otherwise in the PR. DO NOT fix merge conflicts using a merge commit. Prefer git rebase . DO NOT mix independent, unrelated changes in one PR. Separate real product/test code changes from large code formatting/dead code removal changes. Separate unrelated fixes into separate PRs, especially if they are in different assemblies. Merging Pull Requests (for contributors with write access) DO use \"Squash and Merge\" by default for individual contributions unless requested by the PR author. Do so even if the PR only contains one commit. It creates a simpler history than \"Create a Merge Commit.\" Reasons that PR authors may request \"Merge and Commit\" may include (but are not limited to): The change is easier to understand as a series of focused commits. Each commit in the series must be buildable so as not to break git bisect . Contributor is using an email address other than the primary GitHub address and wants that preserved in the history. Contributor must be willing to squash the commits manually before acceptance. General DOs and DON'Ts Please do: DO follow our Coding Style (C# code-specific) DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it's often better to create a new issue than to side track the discussion. DO Create a new issue for each major piece of a change (e.g. front-end UI changes, back-end UI changes, and underlying functionality) which you group together in the PR for the overall change. DO blog and tweet (or whatever) about your contributions frequently! Please do not: DON'T make PRs for style changes DON'T surprise us with big pull requests. Instead, file an issue and start a discussion so we can agree on a direction before you invest a large amount of time. DON'T commit code that you didn't write. If you find code that you think is a good fit, file an issue and start a discussion before proceeding. DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it. DON'T add API additions without filing an issue and discussing it with us first. See the API Review Process . Commit Messages Please format commit messages as follows (based on A Note About Git Commit Messages ) Summarize change in 50 characters or less Provide more detail after the first line. Leave one blank line below the summary and wrap all lines at 72 characters or less. If the change fixes an issue, leave another blank line after the final paragraph and indicate which issue is fixed in the specified format below. Fix #42 Also do your best to factor commits appropriately: not too large with unrelated things in the same commit, and not too small with the same change applied N times in N different commits. Contributor License Agreement You must sign a Contributor License Agreement before your PR will be merged. This is a one-time requirement for our projects. The Agreement: LuzFaltex Contributor License Agreement You don't have to do this up front. You can simply clone, fork, and submit your pull-request as usual. When your pull-request is created, it is classified by a CLA bot. If the change is trivial (for example, you just fixed a typo), then the PR is labeled with cla-not-required . Otherwise it is classified as cla-required . Once you signed a CLA, the current and all future pull requests will be labelled as cla-signed . File Headers The following file header is used for all LuzFaltex open source projects. Please use it for new files // Licensed to LuzFaltex under one or more agreements. // LuzFaltex licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information."
  },
  "contribute/style-quick-start.html": {
    "href": "contribute/style-quick-start.html",
    "title": "Docs Style guide - Quick start | LuzFaltex Documentation",
    "keywords": "Docs style and voice quick start This quick start is a brief guide to writing technical content for publication on docs.luzfaltex.com. These guidelines apply whether you are creating new documentation or updating existing documentation. Best practices: Check the spelling and grammar in your articles, even if you have to copy and paste into Microsoft Word to check. Use a casual and friendly voice—like you're talking to another person one-on-one. Use simple sentences. Easy-to-read sentences mean the reader can quickly use the guidance you share. Use the Microsoft voice principles We aspire to follow these principles when we write technical content for docs.luzfaltex.com . We might not always get there, but we need to keep trying! Focus on the intent : Customers have a specific purpose in mind when they consult our documentation. Before you begin writing, clearly determine who the customer is and what task they are trying to do. Then, write your article to help that specific customer do that specific task. Use everyday words : Try to use natural language, the words your customers use. Be less formal but not less technical. Provide examples that explain new concepts. Write concisely : Don't waste words. Be affirmative and don't use extra words or lots of qualifiers. Keep sentences short and concise. Keep your article focused. If a task has a qualifier, put it at the beginning of the sentence or paragraph. Also, keep the number of notes to a minimum. Use a screenshot when it can save words. Make your article easy to scan : Put the most important things first. Use sections to chunk long procedures into more manageable groups of steps. (Procedures with more than 12 steps are probably too long.) Use a screenshot when it adds clarity. Show empathy : Use a supportive tone in the article, and keep disclaimers to a minimum. Honestly call out areas that will be frustrating to customers. Make sure the article focuses on what matters to customers; don't just give a technical lecture. Consider localization and machine translation Our technical articles are translated into several languages, and some are modified for particular markets or geographies. People might also use machine translation on the web to read the technical articles. So, keep the following guidelines in mind when you're writing: Make sure the article contains no grammar, spelling, or punctuation errors : This is something we should do in general. Some Markdown editors (such as MarkdownPad 2.0) have a basic spell checker, but it's a good practice to paste the rendered HTML content from the article into Word, which has a more robust spell and grammar checker. Make your sentences as short as possible : Compound sentences or chains of clauses make translation difficult. Split up sentences if you can do it without being too redundant or sounding weird. We don't want articles written in unnatural language either. Use simple and consistent sentence construction : Consistency is better for translation. Avoid parentheticals and asides, and have the subject as near the beginning of the sentence as possible. Check out a few published articles. If an article has a friendly, easy-to-read style, use it as a model. Use consistent wording and capitalization : Again, consistency is key. Do not capitalize a word if it isn't at the start of a sentence or it isn't a proper noun. Include the \"small words\" : Words that we consider small and unimportant in English because they are understood for context (such as \"a,\" \"the,\" \"that,\" and \"is\") are crucial for machine translation. Be sure to include them. Other style and voice issues to watch for Don't break up steps with commentary or asides. For steps that include code snippets, put additional information about the step into the code as comments. This reduces the amount of text that people have to read through. The key information gets copied into the code project to remind people of what the code is doing when they refer to it later. Use sentence case for all titles and headings. Use \"sign in\" and not \"log in.\" For more guidelines, see the Microsoft Writing Style Guide ."
  }
}